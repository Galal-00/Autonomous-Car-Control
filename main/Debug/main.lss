
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000015d4  00001668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008000a6  008000a6  000016ae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000170c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001922  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a4  00000000  00000000  00003142  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c4d  00000000  00000000  000038e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  00004534  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056a  00000000  00000000  00004854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011cb  00000000  00000000  00004dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00005f89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3b       	cpi	r26, 0xB5	; 181
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 94 07 	call	0xf28	; 0xf28 <main>
      8a:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Init>:

char UART_RxChar()
{
	while(!(UCSRA & (1<<RXC)));		// wait until data is received
	return UDR;
}
      92:	10 bc       	out	0x20, r1	; 32
      94:	83 e3       	ldi	r24, 0x33	; 51
      96:	89 b9       	out	0x09, r24	; 9
      98:	88 e9       	ldi	r24, 0x98	; 152
      9a:	8a b9       	out	0x0a, r24	; 10
      9c:	86 e8       	ldi	r24, 0x86	; 134
      9e:	80 bd       	out	0x20, r24	; 32
      a0:	08 95       	ret

000000a2 <UART_TxChar>:
      a2:	5d 9b       	sbis	0x0b, 5	; 11
      a4:	fe cf       	rjmp	.-4      	; 0xa2 <UART_TxChar>
      a6:	8c b9       	out	0x0c, r24	; 12
      a8:	08 95       	ret

000000aa <UART_SendString>:

void UART_SendString(char *str)
{
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	cf 93       	push	r28
      b0:	8c 01       	movw	r16, r24
	unsigned char j=0;
      b2:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (str[j]!=0)		/* Send string till null */
      b4:	03 c0       	rjmp	.+6      	; 0xbc <UART_SendString+0x12>
	{
		UART_TxChar(str[j]);
      b6:	0e 94 51 00 	call	0xa2	; 0xa2 <UART_TxChar>
		j++;
      ba:	cf 5f       	subi	r28, 0xFF	; 255

void UART_SendString(char *str)
{
	unsigned char j=0;
	
	while (str[j]!=0)		/* Send string till null */
      bc:	f8 01       	movw	r30, r16
      be:	ec 0f       	add	r30, r28
      c0:	f1 1d       	adc	r31, r1
      c2:	80 81       	ld	r24, Z
      c4:	81 11       	cpse	r24, r1
      c6:	f7 cf       	rjmp	.-18     	; 0xb6 <UART_SendString+0xc>
	{
		UART_TxChar(str[j]);
		j++;
	}
}
      c8:	cf 91       	pop	r28
      ca:	1f 91       	pop	r17
      cc:	0f 91       	pop	r16
      ce:	08 95       	ret

000000d0 <LCD_cmd>:
	return;
}

void LCD_cmd(unsigned char cmd)
{
	LCD_DATA = cmd; // data lines are set to send command
      d0:	8b bb       	out	0x1b, r24	; 27
	
	CTRL &= ~(1 << rs); // RS sets 0, for command data
      d2:	88 b3       	in	r24, 0x18	; 24
      d4:	8f 7d       	andi	r24, 0xDF	; 223
      d6:	88 bb       	out	0x18, r24	; 24
	CTRL &= ~(1 << rw); // RW sets 0, to write data
      d8:	88 b3       	in	r24, 0x18	; 24
      da:	8f 7b       	andi	r24, 0xBF	; 191
      dc:	88 bb       	out	0x18, r24	; 24
	CTRL |= (1 << en); // make enable high
      de:	88 b3       	in	r24, 0x18	; 24
      e0:	80 68       	ori	r24, 0x80	; 128
      e2:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e4:	2f ef       	ldi	r18, 0xFF	; 255
      e6:	80 e7       	ldi	r24, 0x70	; 112
      e8:	92 e0       	ldi	r25, 0x02	; 2
      ea:	21 50       	subi	r18, 0x01	; 1
      ec:	80 40       	sbci	r24, 0x00	; 0
      ee:	90 40       	sbci	r25, 0x00	; 0
      f0:	e1 f7       	brne	.-8      	; 0xea <LCD_cmd+0x1a>
      f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_cmd+0x24>
      f4:	00 00       	nop
	
	_delay_ms(100);
	CTRL &= ~(1 << en); // make enable low
      f6:	88 b3       	in	r24, 0x18	; 24
      f8:	8f 77       	andi	r24, 0x7F	; 127
      fa:	88 bb       	out	0x18, r24	; 24
      fc:	08 95       	ret

000000fe <init_LCD>:
#define rw PB6 // read/write signal is connected to port A pin 6
#define rs PB5 // register select signal is connected to port A pin 5

void init_LCD(void)
{
	LCD_cmd(0x38); // initialization in 8bit mode of 16X2 LCD
      fe:	88 e3       	ldi	r24, 0x38	; 56
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_cmd>
     106:	8f ec       	ldi	r24, 0xCF	; 207
     108:	97 e0       	ldi	r25, 0x07	; 7
     10a:	01 97       	sbiw	r24, 0x01	; 1
     10c:	f1 f7       	brne	.-4      	; 0x10a <init_LCD+0xc>
     10e:	00 c0       	rjmp	.+0      	; 0x110 <init_LCD+0x12>
     110:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x01); // make clear LCD
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_cmd>
     11a:	8f ec       	ldi	r24, 0xCF	; 207
     11c:	97 e0       	ldi	r25, 0x07	; 7
     11e:	01 97       	sbiw	r24, 0x01	; 1
     120:	f1 f7       	brne	.-4      	; 0x11e <init_LCD+0x20>
     122:	00 c0       	rjmp	.+0      	; 0x124 <init_LCD+0x26>
     124:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x02); // return home
     126:	82 e0       	ldi	r24, 0x02	; 2
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_cmd>
     12e:	8f ec       	ldi	r24, 0xCF	; 207
     130:	97 e0       	ldi	r25, 0x07	; 7
     132:	01 97       	sbiw	r24, 0x01	; 1
     134:	f1 f7       	brne	.-4      	; 0x132 <init_LCD+0x34>
     136:	00 c0       	rjmp	.+0      	; 0x138 <init_LCD+0x3a>
     138:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x06); // make increment in cursor
     13a:	86 e0       	ldi	r24, 0x06	; 6
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_cmd>
     142:	8f ec       	ldi	r24, 0xCF	; 207
     144:	97 e0       	ldi	r25, 0x07	; 7
     146:	01 97       	sbiw	r24, 0x01	; 1
     148:	f1 f7       	brne	.-4      	; 0x146 <init_LCD+0x48>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <init_LCD+0x4e>
     14c:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x80); // "8" go to first line and "0" is for 0th position
     14e:	80 e8       	ldi	r24, 0x80	; 128
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_cmd>
     156:	8f ec       	ldi	r24, 0xCF	; 207
     158:	97 e0       	ldi	r25, 0x07	; 7
     15a:	01 97       	sbiw	r24, 0x01	; 1
     15c:	f1 f7       	brne	.-4      	; 0x15a <init_LCD+0x5c>
     15e:	00 c0       	rjmp	.+0      	; 0x160 <init_LCD+0x62>
     160:	00 00       	nop
     162:	08 95       	ret

00000164 <LCD_write>:
	return;
}

void LCD_write(unsigned char data)
{
	LCD_DATA = data; // data lines are set to send command
     164:	8b bb       	out	0x1b, r24	; 27
	CTRL |= (1 << rs); // RS sets 1, for typing data
     166:	88 b3       	in	r24, 0x18	; 24
     168:	80 62       	ori	r24, 0x20	; 32
     16a:	88 bb       	out	0x18, r24	; 24
	CTRL &= ~(1 << rw); // RW sets 0, to write data
     16c:	88 b3       	in	r24, 0x18	; 24
     16e:	8f 7b       	andi	r24, 0xBF	; 191
     170:	88 bb       	out	0x18, r24	; 24
	CTRL |= (1 << en); // make enable high
     172:	88 b3       	in	r24, 0x18	; 24
     174:	80 68       	ori	r24, 0x80	; 128
     176:	88 bb       	out	0x18, r24	; 24
     178:	8f ec       	ldi	r24, 0xCF	; 207
     17a:	97 e0       	ldi	r25, 0x07	; 7
     17c:	01 97       	sbiw	r24, 0x01	; 1
     17e:	f1 f7       	brne	.-4      	; 0x17c <LCD_write+0x18>
     180:	00 c0       	rjmp	.+0      	; 0x182 <LCD_write+0x1e>
     182:	00 00       	nop

	_delay_ms(1);
	CTRL &= ~(1 << en); // make enable low
     184:	88 b3       	in	r24, 0x18	; 24
     186:	8f 77       	andi	r24, 0x7F	; 127
     188:	88 bb       	out	0x18, r24	; 24
     18a:	08 95       	ret

0000018c <LCD_write_string>:

	return;
}

void LCD_write_string(char* data_str)
{
     18c:	0f 93       	push	r16
     18e:	1f 93       	push	r17
     190:	cf 93       	push	r28
     192:	df 93       	push	r29
     194:	8c 01       	movw	r16, r24
	int i = 0;
     196:	c0 e0       	ldi	r28, 0x00	; 0
     198:	d0 e0       	ldi	r29, 0x00	; 0
	while(data_str[i] != 0)		/* Write string till null */
     19a:	03 c0       	rjmp	.+6      	; 0x1a2 <LCD_write_string+0x16>
	{
		LCD_write(data_str[i]);
     19c:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_write>
		i++;
     1a0:	21 96       	adiw	r28, 0x01	; 1
}

void LCD_write_string(char* data_str)
{
	int i = 0;
	while(data_str[i] != 0)		/* Write string till null */
     1a2:	f8 01       	movw	r30, r16
     1a4:	ec 0f       	add	r30, r28
     1a6:	fd 1f       	adc	r31, r29
     1a8:	80 81       	ld	r24, Z
     1aa:	81 11       	cpse	r24, r1
     1ac:	f7 cf       	rjmp	.-18     	; 0x19c <LCD_write_string+0x10>
	{
		LCD_write(data_str[i]);
		i++;
	}
}
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	1f 91       	pop	r17
     1b4:	0f 91       	pop	r16
     1b6:	08 95       	ret

000001b8 <LCD_clear_line>:

void LCD_clear_line(int line_num)
{
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
	//assume the LCD is 32x2
	if(line_num == 1) LCD_cmd(0x80);	//force cursor to beginning of 1st line
     1bc:	01 97       	sbiw	r24, 0x01	; 1
     1be:	31 f4       	brne	.+12     	; 0x1cc <LCD_clear_line+0x14>
     1c0:	80 e8       	ldi	r24, 0x80	; 128
     1c2:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_cmd>
		i++;
	}
}

void LCD_clear_line(int line_num)
{
     1c6:	c0 e0       	ldi	r28, 0x00	; 0
     1c8:	d0 e0       	ldi	r29, 0x00	; 0
     1ca:	08 c0       	rjmp	.+16     	; 0x1dc <LCD_clear_line+0x24>
	//assume the LCD is 32x2
	if(line_num == 1) LCD_cmd(0x80);	//force cursor to beginning of 1st line
	else LCD_cmd(0xC0);					//force cursor to beginning of 2nd line
     1cc:	80 ec       	ldi	r24, 0xC0	; 192
     1ce:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_cmd>
     1d2:	f9 cf       	rjmp	.-14     	; 0x1c6 <LCD_clear_line+0xe>
	for(int i = 0; i < 32; i++)
	{
		LCD_write(0);
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_write>
void LCD_clear_line(int line_num)
{
	//assume the LCD is 32x2
	if(line_num == 1) LCD_cmd(0x80);	//force cursor to beginning of 1st line
	else LCD_cmd(0xC0);					//force cursor to beginning of 2nd line
	for(int i = 0; i < 32; i++)
     1da:	21 96       	adiw	r28, 0x01	; 1
     1dc:	c0 32       	cpi	r28, 0x20	; 32
     1de:	d1 05       	cpc	r29, r1
     1e0:	cc f3       	brlt	.-14     	; 0x1d4 <LCD_clear_line+0x1c>
	{
		LCD_write(0);
	}
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	08 95       	ret

000001e8 <pwm_lcd_init>:
{
	//TCCR2 |= (1<<WGM21) | (1<<CS22) | (1<<CS21) | (1<<CS20);	//CTC, /1024 prescaling
	//OCR2 = 78;	//set compare value, 0.01 seconds
	//TIMSK |= (1<<OCIE2); //Enable interrupt on compare match
	
	TCCR2 |= (1<<CS22) | (1<<CS21) | (1<<CS20);	// Normal mode, /1024 prescaling, OC2 disconnected
     1e8:	85 b5       	in	r24, 0x25	; 37
     1ea:	87 60       	ori	r24, 0x07	; 7
     1ec:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 177;	// start counting from 177
     1ee:	81 eb       	ldi	r24, 0xB1	; 177
     1f0:	84 bd       	out	0x24, r24	; 36
	TIMSK |= (1<<TOIE2); //Enable interrupt on overflow
     1f2:	89 b7       	in	r24, 0x39	; 57
     1f4:	80 64       	ori	r24, 0x40	; 64
     1f6:	89 bf       	out	0x39, r24	; 57
     1f8:	08 95       	ret

000001fa <pwm_dc_motor_init>:
}

void pwm_dc_motor_init()
{
	TCCR0 |= (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);	//Fast PWM, 8-bit, non-inverted, no prescaling
     1fa:	83 b7       	in	r24, 0x33	; 51
     1fc:	89 66       	ori	r24, 0x69	; 105
     1fe:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<PB3);	//Set pin OC0 as output
     200:	87 b3       	in	r24, 0x17	; 23
     202:	88 60       	ori	r24, 0x08	; 8
     204:	87 bb       	out	0x17, r24	; 23
     206:	08 95       	ret

00000208 <pwm_servo_motor_init>:
}

void pwm_servo_motor_init()
{
	TCCR1A |= (1<<COM1A1) | (1<<WGM11);	//Fast PWM, non-inverted
     208:	8f b5       	in	r24, 0x2f	; 47
     20a:	82 68       	ori	r24, 0x82	; 130
     20c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<COM1B1) | (1<<WGM13) | (1<<WGM12) | (1<<CS11) | (1<<CS10);	//Fast PWM, non-inverted, /64 prescaling
     20e:	8e b5       	in	r24, 0x2e	; 46
     210:	8b 63       	ori	r24, 0x3B	; 59
     212:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 2499; //set compare value, given: fPWM=50Hz (period=20ms)
     214:	83 ec       	ldi	r24, 0xC3	; 195
     216:	99 e0       	ldi	r25, 0x09	; 9
     218:	97 bd       	out	0x27, r25	; 39
     21a:	86 bd       	out	0x26, r24	; 38
	DDRD |= (1<<PD4) | (1<<PD5);	//Set pins OC1A and OC1B as output
     21c:	81 b3       	in	r24, 0x11	; 17
     21e:	80 63       	ori	r24, 0x30	; 48
     220:	81 bb       	out	0x11, r24	; 17
	OCR1A = 187;	//start at 0deg angle	
     222:	8b eb       	ldi	r24, 0xBB	; 187
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	9b bd       	out	0x2b, r25	; 43
     228:	8a bd       	out	0x2a, r24	; 42
     22a:	08 95       	ret

0000022c <pwm_init>:
#include <avr/io.h>
#include <util/delay.h>

void pwm_init()
{
	pwm_lcd_init();
     22c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <pwm_lcd_init>
	pwm_dc_motor_init();
     230:	0e 94 fd 00 	call	0x1fa	; 0x1fa <pwm_dc_motor_init>
	pwm_servo_motor_init();
     234:	0e 94 04 01 	call	0x208	; 0x208 <pwm_servo_motor_init>
     238:	08 95       	ret

0000023a <clear_str>:
	
}

void clear_str()
{
	for (int i = 0; i < BUFFER_SIZE; i++)
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	05 c0       	rjmp	.+10     	; 0x24a <clear_str+0x10>
	{
		str[i] = 0;
     240:	fc 01       	movw	r30, r24
     242:	e3 55       	subi	r30, 0x53	; 83
     244:	ff 4f       	sbci	r31, 0xFF	; 255
     246:	10 82       	st	Z, r1
	
}

void clear_str()
{
	for (int i = 0; i < BUFFER_SIZE; i++)
     248:	01 96       	adiw	r24, 0x01	; 1
     24a:	88 30       	cpi	r24, 0x08	; 8
     24c:	91 05       	cpc	r25, r1
     24e:	c4 f3       	brlt	.-16     	; 0x240 <clear_str+0x6>
	{
		str[i] = 0;
	}
	ch_index = 0;
     250:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <ch_index+0x1>
     254:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <ch_index>
     258:	08 95       	ret

0000025a <lcd_print_data>:
}

void lcd_print_data(int dc_val, int stepper_val)
{
     25a:	ef 92       	push	r14
     25c:	ff 92       	push	r15
     25e:	0f 93       	push	r16
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
     26a:	28 97       	sbiw	r28, 0x08	; 8
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	de bf       	out	0x3e, r29	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	cd bf       	out	0x3d, r28	; 61
     276:	7c 01       	movw	r14, r24
     278:	8b 01       	movw	r16, r22
	LCD_clear_line(1);
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_clear_line>
	LCD_cmd(0x80);	//force cursor to beginning of 1st line
     282:	80 e8       	ldi	r24, 0x80	; 128
     284:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_cmd>
	char str2[8];
	LCD_write_string("Speed: ");
     288:	8b e6       	ldi	r24, 0x6B	; 107
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_string>
	if(str[3] == 'B' && dc_val != 0) LCD_write('-');
     290:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <str+0x3>
     294:	82 34       	cpi	r24, 0x42	; 66
     296:	31 f4       	brne	.+12     	; 0x2a4 <lcd_print_data+0x4a>
     298:	e1 14       	cp	r14, r1
     29a:	f1 04       	cpc	r15, r1
     29c:	19 f0       	breq	.+6      	; 0x2a4 <lcd_print_data+0x4a>
     29e:	8d e2       	ldi	r24, 0x2D	; 45
     2a0:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_write>
	sprintf(str2, "%d", dc_val);
     2a4:	ff 92       	push	r15
     2a6:	ef 92       	push	r14
     2a8:	83 e7       	ldi	r24, 0x73	; 115
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	9f 93       	push	r25
     2ae:	8f 93       	push	r24
     2b0:	ce 01       	movw	r24, r28
     2b2:	01 96       	adiw	r24, 0x01	; 1
     2b4:	7c 01       	movw	r14, r24
     2b6:	9f 93       	push	r25
     2b8:	8f 93       	push	r24
     2ba:	0e 94 fe 07 	call	0xffc	; 0xffc <sprintf>
	LCD_write_string(str2);
     2be:	c7 01       	movw	r24, r14
     2c0:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_string>
	LCD_write_string("% ");
     2c4:	86 e7       	ldi	r24, 0x76	; 118
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_string>
	LCD_write_string("Direction: ");
     2cc:	89 e7       	ldi	r24, 0x79	; 121
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_string>
	if(str[6] == 'L' && stepper_val != 0) LCD_write('-');
     2d4:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <str+0x6>
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	8c 34       	cpi	r24, 0x4C	; 76
     2e6:	31 f4       	brne	.+12     	; 0x2f4 <lcd_print_data+0x9a>
     2e8:	01 15       	cp	r16, r1
     2ea:	11 05       	cpc	r17, r1
     2ec:	19 f0       	breq	.+6      	; 0x2f4 <lcd_print_data+0x9a>
     2ee:	8d e2       	ldi	r24, 0x2D	; 45
     2f0:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_write>
	sprintf(str2, "%d", stepper_val);
     2f4:	1f 93       	push	r17
     2f6:	0f 93       	push	r16
     2f8:	83 e7       	ldi	r24, 0x73	; 115
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	9f 93       	push	r25
     2fe:	8f 93       	push	r24
     300:	8e 01       	movw	r16, r28
     302:	0f 5f       	subi	r16, 0xFF	; 255
     304:	1f 4f       	sbci	r17, 0xFF	; 255
     306:	1f 93       	push	r17
     308:	0f 93       	push	r16
     30a:	0e 94 fe 07 	call	0xffc	; 0xffc <sprintf>
	LCD_write_string(str2);
     30e:	c8 01       	movw	r24, r16
     310:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_string>
}
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	28 96       	adiw	r28, 0x08	; 8
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	f8 94       	cli
     326:	de bf       	out	0x3e, r29	; 62
     328:	0f be       	out	0x3f, r0	; 63
     32a:	cd bf       	out	0x3d, r28	; 61
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	1f 91       	pop	r17
     332:	0f 91       	pop	r16
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	08 95       	ret

0000033a <lcd_print_time>:

void lcd_print_time()
{
	sprintf(sec, "%d", atoi(sec) + 1);	//increment seconds
     33a:	82 e6       	ldi	r24, 0x62	; 98
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <atoi>
     342:	01 96       	adiw	r24, 0x01	; 1
     344:	9f 93       	push	r25
     346:	8f 93       	push	r24
     348:	83 e7       	ldi	r24, 0x73	; 115
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	9f 93       	push	r25
     34e:	8f 93       	push	r24
     350:	82 e6       	ldi	r24, 0x62	; 98
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	9f 93       	push	r25
     356:	8f 93       	push	r24
     358:	0e 94 fe 07 	call	0xffc	; 0xffc <sprintf>
	// the following is to preserve the 00:00:00 format
	char temp;
	if(atoi(sec) < 10)
     35c:	82 e6       	ldi	r24, 0x62	; 98
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <atoi>
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	0a 97       	sbiw	r24, 0x0a	; 10
     372:	34 f4       	brge	.+12     	; 0x380 <lcd_print_time+0x46>
	{
		temp = sec[0];
     374:	e2 e6       	ldi	r30, 0x62	; 98
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	80 81       	ld	r24, Z
		sec[0] = '0';
     37a:	90 e3       	ldi	r25, 0x30	; 48
     37c:	90 83       	st	Z, r25
		sec[1] = temp;
     37e:	81 83       	std	Z+1, r24	; 0x01
	}
	if(atoi(sec) == 60)
     380:	82 e6       	ldi	r24, 0x62	; 98
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <atoi>
     388:	cc 97       	sbiw	r24, 0x3c	; 60
     38a:	09 f0       	breq	.+2      	; 0x38e <lcd_print_time+0x54>
     38c:	56 c0       	rjmp	.+172    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
	{
		//full minute passed
		sec[0] = '0';
     38e:	e2 e6       	ldi	r30, 0x62	; 98
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	80 e3       	ldi	r24, 0x30	; 48
     394:	80 83       	st	Z, r24
		sec[1] = '0';
     396:	81 83       	std	Z+1, r24	; 0x01
		sprintf(min, "%d", atoi(min) + 1);	//increment minutes
     398:	85 e6       	ldi	r24, 0x65	; 101
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <atoi>
     3a0:	01 96       	adiw	r24, 0x01	; 1
     3a2:	9f 93       	push	r25
     3a4:	8f 93       	push	r24
     3a6:	83 e7       	ldi	r24, 0x73	; 115
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	9f 93       	push	r25
     3ac:	8f 93       	push	r24
     3ae:	85 e6       	ldi	r24, 0x65	; 101
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	9f 93       	push	r25
     3b4:	8f 93       	push	r24
     3b6:	0e 94 fe 07 	call	0xffc	; 0xffc <sprintf>
		if(atoi(min) < 10)
     3ba:	85 e6       	ldi	r24, 0x65	; 101
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <atoi>
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0a 97       	sbiw	r24, 0x0a	; 10
     3d0:	34 f4       	brge	.+12     	; 0x3de <lcd_print_time+0xa4>
		{
			temp = min[0];
     3d2:	e5 e6       	ldi	r30, 0x65	; 101
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	80 81       	ld	r24, Z
			min[0] = '0';
     3d8:	90 e3       	ldi	r25, 0x30	; 48
     3da:	90 83       	st	Z, r25
			min[1] = temp;
     3dc:	81 83       	std	Z+1, r24	; 0x01
		}
		if (atoi(min) == 60)
     3de:	85 e6       	ldi	r24, 0x65	; 101
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <atoi>
     3e6:	cc 97       	sbiw	r24, 0x3c	; 60
     3e8:	41 f5       	brne	.+80     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		{
			//full hour passed
			min[0] = '0';
     3ea:	e5 e6       	ldi	r30, 0x65	; 101
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 e3       	ldi	r24, 0x30	; 48
     3f0:	80 83       	st	Z, r24
			min[1] = '0';
     3f2:	81 83       	std	Z+1, r24	; 0x01
			sprintf(hour, "%d", atoi(hour) + 1); //increment hours
     3f4:	88 e6       	ldi	r24, 0x68	; 104
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <atoi>
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	9f 93       	push	r25
     400:	8f 93       	push	r24
     402:	83 e7       	ldi	r24, 0x73	; 115
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	9f 93       	push	r25
     408:	8f 93       	push	r24
     40a:	88 e6       	ldi	r24, 0x68	; 104
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	9f 93       	push	r25
     410:	8f 93       	push	r24
     412:	0e 94 fe 07 	call	0xffc	; 0xffc <sprintf>
			if(atoi(hour) < 10)
     416:	88 e6       	ldi	r24, 0x68	; 104
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <atoi>
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	0a 97       	sbiw	r24, 0x0a	; 10
     42c:	34 f4       	brge	.+12     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
			{
				temp = hour[0];
     42e:	e8 e6       	ldi	r30, 0x68	; 104
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	80 81       	ld	r24, Z
				hour[0] = '0';
     434:	90 e3       	ldi	r25, 0x30	; 48
     436:	90 83       	st	Z, r25
				hour[1] = temp;
     438:	81 83       	std	Z+1, r24	; 0x01
			}
		}
	}
	//print to LCD
	LCD_cmd(0xC6);	// go to second line, 6th character
     43a:	86 ec       	ldi	r24, 0xC6	; 198
     43c:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_cmd>
	LCD_write_string(hour);
     440:	88 e6       	ldi	r24, 0x68	; 104
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_string>
	LCD_write(':');
     448:	8a e3       	ldi	r24, 0x3A	; 58
     44a:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_write>
	LCD_write_string(min);
     44e:	85 e6       	ldi	r24, 0x65	; 101
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_string>
	LCD_write(':');
     456:	8a e3       	ldi	r24, 0x3A	; 58
     458:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_write>
	LCD_write_string(sec);
     45c:	82 e6       	ldi	r24, 0x62	; 98
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_string>
     464:	08 95       	ret

00000466 <set_dc>:
}

void set_dc(int speed, char dir)
{
     466:	9c 01       	movw	r18, r24
	if(dir == 'F')
     468:	66 34       	cpi	r22, 0x46	; 70
     46a:	39 f4       	brne	.+14     	; 0x47a <set_dc+0x14>
	{
		PORTB &= ~(1<<PB1);
     46c:	88 b3       	in	r24, 0x18	; 24
     46e:	8d 7f       	andi	r24, 0xFD	; 253
     470:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1<<PB2);
     472:	88 b3       	in	r24, 0x18	; 24
     474:	84 60       	ori	r24, 0x04	; 4
     476:	88 bb       	out	0x18, r24	; 24
     478:	08 c0       	rjmp	.+16     	; 0x48a <set_dc+0x24>
	}
	else if(dir == 'B')
     47a:	62 34       	cpi	r22, 0x42	; 66
     47c:	31 f4       	brne	.+12     	; 0x48a <set_dc+0x24>
	{
		PORTB &= ~(1<<PB2);
     47e:	88 b3       	in	r24, 0x18	; 24
     480:	8b 7f       	andi	r24, 0xFB	; 251
     482:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1<<PB1);
     484:	88 b3       	in	r24, 0x18	; 24
     486:	82 60       	ori	r24, 0x02	; 2
     488:	88 bb       	out	0x18, r24	; 24
	}
	unsigned char duty_cycle = speed * 255 / 100;
     48a:	4f ef       	ldi	r20, 0xFF	; 255
     48c:	42 9f       	mul	r20, r18
     48e:	c0 01       	movw	r24, r0
     490:	43 9f       	mul	r20, r19
     492:	90 0d       	add	r25, r0
     494:	11 24       	eor	r1, r1
     496:	64 e6       	ldi	r22, 0x64	; 100
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	0e 94 b0 07 	call	0xf60	; 0xf60 <__divmodhi4>
	OCR0 = duty_cycle;
     49e:	6c bf       	out	0x3c, r22	; 60
     4a0:	08 95       	ret

000004a2 <set_servo>:
}

void set_servo(int step, char dir)
{
	unsigned char new_step;
	if(dir == 'R')
     4a2:	62 35       	cpi	r22, 0x52	; 82
     4a4:	69 f4       	brne	.+26     	; 0x4c0 <set_servo+0x1e>
	{
		new_step = (step * 31 / 45) + 187;
     4a6:	4f e1       	ldi	r20, 0x1F	; 31
     4a8:	48 9f       	mul	r20, r24
     4aa:	90 01       	movw	r18, r0
     4ac:	49 9f       	mul	r20, r25
     4ae:	30 0d       	add	r19, r0
     4b0:	11 24       	eor	r1, r1
     4b2:	c9 01       	movw	r24, r18
     4b4:	6d e2       	ldi	r22, 0x2D	; 45
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	0e 94 b0 07 	call	0xf60	; 0xf60 <__divmodhi4>
     4bc:	65 54       	subi	r22, 0x45	; 69
     4be:	0d c0       	rjmp	.+26     	; 0x4da <set_servo+0x38>
	}
	else
	{
		new_step = (step * 32 / -45) + 187;
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	82 95       	swap	r24
     4c6:	92 95       	swap	r25
     4c8:	90 7f       	andi	r25, 0xF0	; 240
     4ca:	98 27       	eor	r25, r24
     4cc:	80 7f       	andi	r24, 0xF0	; 240
     4ce:	98 27       	eor	r25, r24
     4d0:	63 ed       	ldi	r22, 0xD3	; 211
     4d2:	7f ef       	ldi	r23, 0xFF	; 255
     4d4:	0e 94 b0 07 	call	0xf60	; 0xf60 <__divmodhi4>
     4d8:	65 54       	subi	r22, 0x45	; 69
	}
	// new_step: 218 is +45deg, 155 is -45deg, 187 is 0deg
	// note that this makes the servo slightly skewed to the right
	OCR1A = new_step;
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	7b bd       	out	0x2b, r23	; 43
     4de:	6a bd       	out	0x2a, r22	; 42
     4e0:	08 95       	ret

000004e2 <cus_abs>:
}

int cus_abs(int x, int y)
{
     4e2:	9b 01       	movw	r18, r22
	if(x < 0) return (y - (abs(x) % y));
     4e4:	99 23       	and	r25, r25
     4e6:	84 f4       	brge	.+32     	; 0x508 <cus_abs+0x26>
     4e8:	ac 01       	movw	r20, r24
     4ea:	99 23       	and	r25, r25
     4ec:	24 f4       	brge	.+8      	; 0x4f6 <cus_abs+0x14>
     4ee:	44 27       	eor	r20, r20
     4f0:	55 27       	eor	r21, r21
     4f2:	48 1b       	sub	r20, r24
     4f4:	59 0b       	sbc	r21, r25
     4f6:	ca 01       	movw	r24, r20
     4f8:	b9 01       	movw	r22, r18
     4fa:	0e 94 b0 07 	call	0xf60	; 0xf60 <__divmodhi4>
     4fe:	a9 01       	movw	r20, r18
     500:	48 1b       	sub	r20, r24
     502:	59 0b       	sbc	r21, r25
     504:	ca 01       	movw	r24, r20
     506:	08 95       	ret
	else return x % y;
     508:	0e 94 b0 07 	call	0xf60	; 0xf60 <__divmodhi4>
     50c:	08 95       	ret

0000050e <set_stepper>:
	OCR0 = duty_cycle;
}


void set_stepper(int step, char dir)
{
     50e:	9f 92       	push	r9
     510:	af 92       	push	r10
     512:	bf 92       	push	r11
     514:	cf 92       	push	r12
     516:	df 92       	push	r13
     518:	ef 92       	push	r14
     51a:	ff 92       	push	r15
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	ac 01       	movw	r20, r24
     526:	96 2e       	mov	r9, r22
	*/
	int loop_count;
	int remainder;	//remaining steps to achieve desired step count
	int changed_dir = 0;
	int delay = 120;	//delay between stepper pulses
	if (dir == last_stepper_dir | last_stepper_dir == 0)
     528:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <last_stepper_dir>
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	96 13       	cpse	r25, r22
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	21 e0       	ldi	r18, 0x01	; 1
     534:	91 11       	cpse	r25, r1
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	28 2b       	or	r18, r24
     53a:	41 f1       	breq	.+80     	; 0x58c <set_stepper+0x7e>
	{
		//formula when same dir
		loop_count = abs(step - last_stepper_step) / 4;
     53c:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <last_stepper_step>
     540:	30 91 aa 00 	lds	r19, 0x00AA	; 0x8000aa <last_stepper_step+0x1>
     544:	ba 01       	movw	r22, r20
     546:	62 1b       	sub	r22, r18
     548:	73 0b       	sbc	r23, r19
     54a:	9b 01       	movw	r18, r22
     54c:	22 f4       	brpl	.+8      	; 0x556 <set_stepper+0x48>
     54e:	22 27       	eor	r18, r18
     550:	33 27       	eor	r19, r19
     552:	26 1b       	sub	r18, r22
     554:	37 0b       	sbc	r19, r23
     556:	79 01       	movw	r14, r18
     558:	89 01       	movw	r16, r18
     55a:	33 23       	and	r19, r19
     55c:	14 f4       	brge	.+4      	; 0x562 <set_stepper+0x54>
     55e:	0d 5f       	subi	r16, 0xFD	; 253
     560:	1f 4f       	sbci	r17, 0xFF	; 255
     562:	15 95       	asr	r17
     564:	07 95       	ror	r16
     566:	15 95       	asr	r17
     568:	07 95       	ror	r16
		remainder = abs(step - last_stepper_step) % 4;
     56a:	23 e0       	ldi	r18, 0x03	; 3
     56c:	e2 22       	and	r14, r18
     56e:	20 e8       	ldi	r18, 0x80	; 128
     570:	f2 22       	and	r15, r18
     572:	ff 20       	and	r15, r15
     574:	64 f5       	brge	.+88     	; 0x5ce <set_stepper+0xc0>
     576:	31 e0       	ldi	r19, 0x01	; 1
     578:	e3 1a       	sub	r14, r19
     57a:	f1 08       	sbc	r15, r1
     57c:	6c ef       	ldi	r22, 0xFC	; 252
     57e:	e6 2a       	or	r14, r22
     580:	ff 24       	eor	r15, r15
     582:	fa 94       	dec	r15
     584:	7f ef       	ldi	r23, 0xFF	; 255
     586:	e7 1a       	sub	r14, r23
     588:	f7 0a       	sbc	r15, r23
     58a:	21 c0       	rjmp	.+66     	; 0x5ce <set_stepper+0xc0>
	}
	else
	{
		//if dir changes
		loop_count = (step + last_stepper_step - 1) / 4;
     58c:	e0 90 a9 00 	lds	r14, 0x00A9	; 0x8000a9 <last_stepper_step>
     590:	f0 90 aa 00 	lds	r15, 0x00AA	; 0x8000aa <last_stepper_step+0x1>
     594:	e4 0e       	add	r14, r20
     596:	f5 1e       	adc	r15, r21
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	e8 1a       	sub	r14, r24
     59c:	f1 08       	sbc	r15, r1
     59e:	87 01       	movw	r16, r14
     5a0:	12 f4       	brpl	.+4      	; 0x5a6 <set_stepper+0x98>
     5a2:	0d 5f       	subi	r16, 0xFD	; 253
     5a4:	1f 4f       	sbci	r17, 0xFF	; 255
     5a6:	15 95       	asr	r17
     5a8:	07 95       	ror	r16
     5aa:	15 95       	asr	r17
     5ac:	07 95       	ror	r16
		remainder = (step + last_stepper_step - 1) % 4;
     5ae:	23 e0       	ldi	r18, 0x03	; 3
     5b0:	e2 22       	and	r14, r18
     5b2:	20 e8       	ldi	r18, 0x80	; 128
     5b4:	f2 22       	and	r15, r18
     5b6:	ff 20       	and	r15, r15
     5b8:	54 f4       	brge	.+20     	; 0x5ce <set_stepper+0xc0>
     5ba:	31 e0       	ldi	r19, 0x01	; 1
     5bc:	e3 1a       	sub	r14, r19
     5be:	f1 08       	sbc	r15, r1
     5c0:	6c ef       	ldi	r22, 0xFC	; 252
     5c2:	e6 2a       	or	r14, r22
     5c4:	ff 24       	eor	r15, r15
     5c6:	fa 94       	dec	r15
     5c8:	7f ef       	ldi	r23, 0xFF	; 255
     5ca:	e7 1a       	sub	r14, r23
     5cc:	f7 0a       	sbc	r15, r23
	}
	// change direction if new step is smaller then old step and in same direction
	if((step - last_stepper_step < 0) && dir == last_stepper_dir && dir == 'L')
     5ce:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <last_stepper_step>
     5d2:	30 91 aa 00 	lds	r19, 0x00AA	; 0x8000aa <last_stepper_step+0x1>
     5d6:	ba 01       	movw	r22, r20
     5d8:	62 1b       	sub	r22, r18
     5da:	73 0b       	sbc	r23, r19
     5dc:	9b 01       	movw	r18, r22
     5de:	2a f4       	brpl	.+10     	; 0x5ea <set_stepper+0xdc>
     5e0:	99 11       	cpse	r25, r9
     5e2:	03 c0       	rjmp	.+6      	; 0x5ea <set_stepper+0xdc>
     5e4:	7c e4       	ldi	r23, 0x4C	; 76
     5e6:	97 16       	cp	r9, r23
     5e8:	51 f0       	breq	.+20     	; 0x5fe <set_stepper+0xf0>
	{
		 dir = 'R';
		 changed_dir = 1;
	}
	else if((step - last_stepper_step < 0) && dir == last_stepper_dir && dir == 'R')
     5ea:	33 23       	and	r19, r19
     5ec:	2c f4       	brge	.+10     	; 0x5f8 <set_stepper+0xea>
     5ee:	99 11       	cpse	r25, r9
     5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <set_stepper+0xea>
     5f2:	82 e5       	ldi	r24, 0x52	; 82
     5f4:	98 16       	cp	r9, r24
     5f6:	59 f0       	breq	.+22     	; 0x60e <set_stepper+0x100>
		remainder loops are calculated to achieve +-45deg rotation (45 % 4 = 1 loop)
		the scale of rotation is linear so what can be applied 45deg can be applied to any angle
	*/
	int loop_count;
	int remainder;	//remaining steps to achieve desired step count
	int changed_dir = 0;
     5f8:	c1 2c       	mov	r12, r1
     5fa:	d1 2c       	mov	r13, r1
     5fc:	0f c0       	rjmp	.+30     	; 0x61c <set_stepper+0x10e>
	}
	// change direction if new step is smaller then old step and in same direction
	if((step - last_stepper_step < 0) && dir == last_stepper_dir && dir == 'L')
	{
		 dir = 'R';
		 changed_dir = 1;
     5fe:	cc 24       	eor	r12, r12
     600:	c3 94       	inc	r12
     602:	d1 2c       	mov	r13, r1
		remainder = (step + last_stepper_step - 1) % 4;
	}
	// change direction if new step is smaller then old step and in same direction
	if((step - last_stepper_step < 0) && dir == last_stepper_dir && dir == 'L')
	{
		 dir = 'R';
     604:	0f 2e       	mov	r0, r31
     606:	f2 e5       	ldi	r31, 0x52	; 82
     608:	9f 2e       	mov	r9, r31
     60a:	f0 2d       	mov	r31, r0
     60c:	07 c0       	rjmp	.+14     	; 0x61c <set_stepper+0x10e>
		 changed_dir = 1;
	}
	else if((step - last_stepper_step < 0) && dir == last_stepper_dir && dir == 'R')
	{
		 dir = 'L';
		 changed_dir = 1;
     60e:	cc 24       	eor	r12, r12
     610:	c3 94       	inc	r12
     612:	d1 2c       	mov	r13, r1
		 dir = 'R';
		 changed_dir = 1;
	}
	else if((step - last_stepper_step < 0) && dir == last_stepper_dir && dir == 'R')
	{
		 dir = 'L';
     614:	0f 2e       	mov	r0, r31
     616:	fc e4       	ldi	r31, 0x4C	; 76
     618:	9f 2e       	mov	r9, r31
     61a:	f0 2d       	mov	r31, r0
	}
	else
	{
		last_stepper_step = step;
	}
	last_stepper_step = step;
     61c:	50 93 aa 00 	sts	0x00AA, r21	; 0x8000aa <last_stepper_step+0x1>
     620:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <last_stepper_step>
		direction
		if the direction changes the variable is corrected by incrementing or decrementing by 2 positions
		the var is useful to keep the smooth transition between the stepper coils and ensure accurate steps
	*/
	
	if (dir == 'L')
     624:	2c e4       	ldi	r18, 0x4C	; 76
     626:	92 12       	cpse	r9, r18
     628:	a3 c1       	rjmp	.+838    	; 0x970 <__stack+0x111>
	{
		if(last_stepper_dir == 'R')
     62a:	92 35       	cpi	r25, 0x52	; 82
     62c:	c1 f4       	brne	.+48     	; 0x65e <set_stepper+0x150>
		{
			next_stepper_port = (next_stepper_port + 2) % 4;
     62e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     632:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     636:	02 96       	adiw	r24, 0x02	; 2
     638:	83 70       	andi	r24, 0x03	; 3
     63a:	90 78       	andi	r25, 0x80	; 128
     63c:	99 23       	and	r25, r25
     63e:	24 f4       	brge	.+8      	; 0x648 <set_stepper+0x13a>
     640:	01 97       	sbiw	r24, 0x01	; 1
     642:	8c 6f       	ori	r24, 0xFC	; 252
     644:	9f 6f       	ori	r25, 0xFF	; 255
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     64c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			if(next_stepper_port < 0) next_stepper_port = next_stepper_port + 4;
     650:	99 23       	and	r25, r25
     652:	2c f4       	brge	.+10     	; 0x65e <set_stepper+0x150>
     654:	04 96       	adiw	r24, 0x04	; 4
     656:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     65a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		if(next_stepper_port == -1) next_stepper_port = 0;
     65e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     662:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     666:	01 96       	adiw	r24, 0x01	; 1
     668:	21 f4       	brne	.+8      	; 0x672 <set_stepper+0x164>
     66a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     66e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		remainder loops are calculated to achieve +-45deg rotation (45 % 4 = 1 loop)
		the scale of rotation is linear so what can be applied 45deg can be applied to any angle
	*/
	int loop_count;
	int remainder;	//remaining steps to achieve desired step count
	int changed_dir = 0;
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	7d c0       	rjmp	.+250    	; 0x772 <set_stepper+0x264>
			if(next_stepper_port < 0) next_stepper_port = next_stepper_port + 4;
		}
		if(next_stepper_port == -1) next_stepper_port = 0;
		for (int i = 0; i < loop_count ; i++)
		{
			PORTC = (1<<((next_stepper_port) % 4));
     678:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     67c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     680:	83 70       	andi	r24, 0x03	; 3
     682:	90 78       	andi	r25, 0x80	; 128
     684:	99 23       	and	r25, r25
     686:	24 f4       	brge	.+8      	; 0x690 <set_stepper+0x182>
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	8c 6f       	ori	r24, 0xFC	; 252
     68c:	9f 6f       	ori	r25, 0xFF	; 255
     68e:	01 96       	adiw	r24, 0x01	; 1
     690:	41 e0       	ldi	r20, 0x01	; 1
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	ba 01       	movw	r22, r20
     696:	02 c0       	rjmp	.+4      	; 0x69c <set_stepper+0x18e>
     698:	66 0f       	add	r22, r22
     69a:	77 1f       	adc	r23, r23
     69c:	8a 95       	dec	r24
     69e:	e2 f7       	brpl	.-8      	; 0x698 <set_stepper+0x18a>
     6a0:	65 bb       	out	0x15, r22	; 21
     6a2:	7f ef       	ldi	r23, 0xFF	; 255
     6a4:	8d ee       	ldi	r24, 0xED	; 237
     6a6:	92 e0       	ldi	r25, 0x02	; 2
     6a8:	71 50       	subi	r23, 0x01	; 1
     6aa:	80 40       	sbci	r24, 0x00	; 0
     6ac:	90 40       	sbci	r25, 0x00	; 0
     6ae:	e1 f7       	brne	.-8      	; 0x6a8 <set_stepper+0x19a>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <set_stepper+0x1a4>
     6b2:	00 00       	nop
			_delay_ms(delay);
			PORTC = (1<<((next_stepper_port + 1) % 4));
     6b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     6b8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	83 70       	andi	r24, 0x03	; 3
     6c0:	90 78       	andi	r25, 0x80	; 128
     6c2:	99 23       	and	r25, r25
     6c4:	24 f4       	brge	.+8      	; 0x6ce <set_stepper+0x1c0>
     6c6:	01 97       	sbiw	r24, 0x01	; 1
     6c8:	8c 6f       	ori	r24, 0xFC	; 252
     6ca:	9f 6f       	ori	r25, 0xFF	; 255
     6cc:	01 96       	adiw	r24, 0x01	; 1
     6ce:	41 e0       	ldi	r20, 0x01	; 1
     6d0:	50 e0       	ldi	r21, 0x00	; 0
     6d2:	ba 01       	movw	r22, r20
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <set_stepper+0x1cc>
     6d6:	66 0f       	add	r22, r22
     6d8:	77 1f       	adc	r23, r23
     6da:	8a 95       	dec	r24
     6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <set_stepper+0x1c8>
     6de:	65 bb       	out	0x15, r22	; 21
     6e0:	7f ef       	ldi	r23, 0xFF	; 255
     6e2:	8d ee       	ldi	r24, 0xED	; 237
     6e4:	92 e0       	ldi	r25, 0x02	; 2
     6e6:	71 50       	subi	r23, 0x01	; 1
     6e8:	80 40       	sbci	r24, 0x00	; 0
     6ea:	90 40       	sbci	r25, 0x00	; 0
     6ec:	e1 f7       	brne	.-8      	; 0x6e6 <set_stepper+0x1d8>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <set_stepper+0x1e2>
     6f0:	00 00       	nop
			_delay_ms(delay);
			PORTC = (1<<((next_stepper_port + 2) % 4));
     6f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     6f6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     6fa:	02 96       	adiw	r24, 0x02	; 2
     6fc:	83 70       	andi	r24, 0x03	; 3
     6fe:	90 78       	andi	r25, 0x80	; 128
     700:	99 23       	and	r25, r25
     702:	24 f4       	brge	.+8      	; 0x70c <set_stepper+0x1fe>
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	8c 6f       	ori	r24, 0xFC	; 252
     708:	9f 6f       	ori	r25, 0xFF	; 255
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	41 e0       	ldi	r20, 0x01	; 1
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	ba 01       	movw	r22, r20
     712:	02 c0       	rjmp	.+4      	; 0x718 <set_stepper+0x20a>
     714:	66 0f       	add	r22, r22
     716:	77 1f       	adc	r23, r23
     718:	8a 95       	dec	r24
     71a:	e2 f7       	brpl	.-8      	; 0x714 <set_stepper+0x206>
     71c:	65 bb       	out	0x15, r22	; 21
     71e:	7f ef       	ldi	r23, 0xFF	; 255
     720:	8d ee       	ldi	r24, 0xED	; 237
     722:	92 e0       	ldi	r25, 0x02	; 2
     724:	71 50       	subi	r23, 0x01	; 1
     726:	80 40       	sbci	r24, 0x00	; 0
     728:	90 40       	sbci	r25, 0x00	; 0
     72a:	e1 f7       	brne	.-8      	; 0x724 <set_stepper+0x216>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <set_stepper+0x220>
     72e:	00 00       	nop
			_delay_ms(delay);
			PORTC = (1<<((next_stepper_port + 3) % 4));
     730:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     734:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     738:	03 96       	adiw	r24, 0x03	; 3
     73a:	83 70       	andi	r24, 0x03	; 3
     73c:	90 78       	andi	r25, 0x80	; 128
     73e:	99 23       	and	r25, r25
     740:	24 f4       	brge	.+8      	; 0x74a <set_stepper+0x23c>
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	8c 6f       	ori	r24, 0xFC	; 252
     746:	9f 6f       	ori	r25, 0xFF	; 255
     748:	01 96       	adiw	r24, 0x01	; 1
     74a:	41 e0       	ldi	r20, 0x01	; 1
     74c:	50 e0       	ldi	r21, 0x00	; 0
     74e:	ba 01       	movw	r22, r20
     750:	02 c0       	rjmp	.+4      	; 0x756 <set_stepper+0x248>
     752:	66 0f       	add	r22, r22
     754:	77 1f       	adc	r23, r23
     756:	8a 95       	dec	r24
     758:	e2 f7       	brpl	.-8      	; 0x752 <set_stepper+0x244>
     75a:	65 bb       	out	0x15, r22	; 21
     75c:	7f ef       	ldi	r23, 0xFF	; 255
     75e:	8d ee       	ldi	r24, 0xED	; 237
     760:	92 e0       	ldi	r25, 0x02	; 2
     762:	71 50       	subi	r23, 0x01	; 1
     764:	80 40       	sbci	r24, 0x00	; 0
     766:	90 40       	sbci	r25, 0x00	; 0
     768:	e1 f7       	brne	.-8      	; 0x762 <set_stepper+0x254>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <set_stepper+0x25e>
     76c:	00 00       	nop
		{
			next_stepper_port = (next_stepper_port + 2) % 4;
			if(next_stepper_port < 0) next_stepper_port = next_stepper_port + 4;
		}
		if(next_stepper_port == -1) next_stepper_port = 0;
		for (int i = 0; i < loop_count ; i++)
     76e:	2f 5f       	subi	r18, 0xFF	; 255
     770:	3f 4f       	sbci	r19, 0xFF	; 255
     772:	20 17       	cp	r18, r16
     774:	31 07       	cpc	r19, r17
     776:	0c f4       	brge	.+2      	; 0x77a <set_stepper+0x26c>
     778:	7f cf       	rjmp	.-258    	; 0x678 <set_stepper+0x16a>
			PORTC = (1<<((next_stepper_port + 2) % 4));
			_delay_ms(delay);
			PORTC = (1<<((next_stepper_port + 3) % 4));
			_delay_ms(delay);
		}
		if (remainder == 1)
     77a:	21 e0       	ldi	r18, 0x01	; 1
     77c:	e2 16       	cp	r14, r18
     77e:	f1 04       	cpc	r15, r1
     780:	81 f5       	brne	.+96     	; 0x7e2 <set_stepper+0x2d4>
		{
			PORTC = (1<<((next_stepper_port) % 4));
     782:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     786:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     78a:	83 70       	andi	r24, 0x03	; 3
     78c:	90 78       	andi	r25, 0x80	; 128
     78e:	99 23       	and	r25, r25
     790:	24 f4       	brge	.+8      	; 0x79a <set_stepper+0x28c>
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	8c 6f       	ori	r24, 0xFC	; 252
     796:	9f 6f       	ori	r25, 0xFF	; 255
     798:	01 96       	adiw	r24, 0x01	; 1
     79a:	21 e0       	ldi	r18, 0x01	; 1
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	a9 01       	movw	r20, r18
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <set_stepper+0x298>
     7a2:	44 0f       	add	r20, r20
     7a4:	55 1f       	adc	r21, r21
     7a6:	8a 95       	dec	r24
     7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <set_stepper+0x294>
     7aa:	45 bb       	out	0x15, r20	; 21
     7ac:	5f ef       	ldi	r21, 0xFF	; 255
     7ae:	6d ee       	ldi	r22, 0xED	; 237
     7b0:	72 e0       	ldi	r23, 0x02	; 2
     7b2:	51 50       	subi	r21, 0x01	; 1
     7b4:	60 40       	sbci	r22, 0x00	; 0
     7b6:	70 40       	sbci	r23, 0x00	; 0
     7b8:	e1 f7       	brne	.-8      	; 0x7b2 <set_stepper+0x2a4>
     7ba:	00 c0       	rjmp	.+0      	; 0x7bc <set_stepper+0x2ae>
     7bc:	00 00       	nop
			_delay_ms(delay);
			next_stepper_port = (next_stepper_port + 1) % 4;
     7be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     7c2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	83 70       	andi	r24, 0x03	; 3
     7ca:	90 78       	andi	r25, 0x80	; 128
     7cc:	99 23       	and	r25, r25
     7ce:	24 f4       	brge	.+8      	; 0x7d8 <set_stepper+0x2ca>
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	8c 6f       	ori	r24, 0xFC	; 252
     7d4:	9f 6f       	ori	r25, 0xFF	; 255
     7d6:	01 96       	adiw	r24, 0x01	; 1
     7d8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     7dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     7e0:	29 c2       	rjmp	.+1106   	; 0xc34 <__stack+0x3d5>
		}
		else if(remainder == 2)
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	e8 16       	cp	r14, r24
     7e6:	f1 04       	cpc	r15, r1
     7e8:	09 f0       	breq	.+2      	; 0x7ec <set_stepper+0x2de>
     7ea:	4f c0       	rjmp	.+158    	; 0x88a <__stack+0x2b>
		{
			PORTC = (1<<((next_stepper_port) % 4));
     7ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     7f0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     7f4:	83 70       	andi	r24, 0x03	; 3
     7f6:	90 78       	andi	r25, 0x80	; 128
     7f8:	99 23       	and	r25, r25
     7fa:	24 f4       	brge	.+8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7fc:	01 97       	sbiw	r24, 0x01	; 1
     7fe:	8c 6f       	ori	r24, 0xFC	; 252
     800:	9f 6f       	ori	r25, 0xFF	; 255
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	21 e0       	ldi	r18, 0x01	; 1
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	a9 01       	movw	r20, r18
     80a:	02 c0       	rjmp	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     80c:	44 0f       	add	r20, r20
     80e:	55 1f       	adc	r21, r21
     810:	8a 95       	dec	r24
     812:	e2 f7       	brpl	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     814:	45 bb       	out	0x15, r20	; 21
     816:	5f ef       	ldi	r21, 0xFF	; 255
     818:	6d ee       	ldi	r22, 0xED	; 237
     81a:	72 e0       	ldi	r23, 0x02	; 2
     81c:	51 50       	subi	r21, 0x01	; 1
     81e:	60 40       	sbci	r22, 0x00	; 0
     820:	70 40       	sbci	r23, 0x00	; 0
     822:	e1 f7       	brne	.-8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     824:	00 c0       	rjmp	.+0      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     826:	00 00       	nop
			_delay_ms(delay);
			PORTC = (1<<((next_stepper_port + 1) % 4));
     828:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     82c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     830:	01 96       	adiw	r24, 0x01	; 1
     832:	83 70       	andi	r24, 0x03	; 3
     834:	90 78       	andi	r25, 0x80	; 128
     836:	99 23       	and	r25, r25
     838:	24 f4       	brge	.+8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     83a:	01 97       	sbiw	r24, 0x01	; 1
     83c:	8c 6f       	ori	r24, 0xFC	; 252
     83e:	9f 6f       	ori	r25, 0xFF	; 255
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	21 e0       	ldi	r18, 0x01	; 1
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	a9 01       	movw	r20, r18
     848:	02 c0       	rjmp	.+4      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     84a:	44 0f       	add	r20, r20
     84c:	55 1f       	adc	r21, r21
     84e:	8a 95       	dec	r24
     850:	e2 f7       	brpl	.-8      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     852:	45 bb       	out	0x15, r20	; 21
     854:	5f ef       	ldi	r21, 0xFF	; 255
     856:	6d ee       	ldi	r22, 0xED	; 237
     858:	72 e0       	ldi	r23, 0x02	; 2
     85a:	51 50       	subi	r21, 0x01	; 1
     85c:	60 40       	sbci	r22, 0x00	; 0
     85e:	70 40       	sbci	r23, 0x00	; 0
     860:	e1 f7       	brne	.-8      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     862:	00 c0       	rjmp	.+0      	; 0x864 <__stack+0x5>
     864:	00 00       	nop
			_delay_ms(delay);
			next_stepper_port = (next_stepper_port + 2) % 4;
     866:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     86a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     86e:	02 96       	adiw	r24, 0x02	; 2
     870:	83 70       	andi	r24, 0x03	; 3
     872:	90 78       	andi	r25, 0x80	; 128
     874:	99 23       	and	r25, r25
     876:	24 f4       	brge	.+8      	; 0x880 <__stack+0x21>
     878:	01 97       	sbiw	r24, 0x01	; 1
     87a:	8c 6f       	ori	r24, 0xFC	; 252
     87c:	9f 6f       	ori	r25, 0xFF	; 255
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     884:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     888:	d5 c1       	rjmp	.+938    	; 0xc34 <__stack+0x3d5>
		}
		else if(remainder == 3)
     88a:	83 e0       	ldi	r24, 0x03	; 3
     88c:	e8 16       	cp	r14, r24
     88e:	f1 04       	cpc	r15, r1
     890:	09 f0       	breq	.+2      	; 0x894 <__stack+0x35>
     892:	d0 c1       	rjmp	.+928    	; 0xc34 <__stack+0x3d5>
		{
			PORTC = (1<<((next_stepper_port) % 4));
     894:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     898:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     89c:	83 70       	andi	r24, 0x03	; 3
     89e:	90 78       	andi	r25, 0x80	; 128
     8a0:	99 23       	and	r25, r25
     8a2:	24 f4       	brge	.+8      	; 0x8ac <__stack+0x4d>
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	8c 6f       	ori	r24, 0xFC	; 252
     8a8:	9f 6f       	ori	r25, 0xFF	; 255
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	21 e0       	ldi	r18, 0x01	; 1
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	a9 01       	movw	r20, r18
     8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <__stack+0x59>
     8b4:	44 0f       	add	r20, r20
     8b6:	55 1f       	adc	r21, r21
     8b8:	8a 95       	dec	r24
     8ba:	e2 f7       	brpl	.-8      	; 0x8b4 <__stack+0x55>
     8bc:	45 bb       	out	0x15, r20	; 21
     8be:	5f ef       	ldi	r21, 0xFF	; 255
     8c0:	6d ee       	ldi	r22, 0xED	; 237
     8c2:	72 e0       	ldi	r23, 0x02	; 2
     8c4:	51 50       	subi	r21, 0x01	; 1
     8c6:	60 40       	sbci	r22, 0x00	; 0
     8c8:	70 40       	sbci	r23, 0x00	; 0
     8ca:	e1 f7       	brne	.-8      	; 0x8c4 <__stack+0x65>
     8cc:	00 c0       	rjmp	.+0      	; 0x8ce <__stack+0x6f>
     8ce:	00 00       	nop
			_delay_ms(delay);
			PORTC = (1<<((next_stepper_port + 1) % 4));
     8d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     8d4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	83 70       	andi	r24, 0x03	; 3
     8dc:	90 78       	andi	r25, 0x80	; 128
     8de:	99 23       	and	r25, r25
     8e0:	24 f4       	brge	.+8      	; 0x8ea <__stack+0x8b>
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	8c 6f       	ori	r24, 0xFC	; 252
     8e6:	9f 6f       	ori	r25, 0xFF	; 255
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	21 e0       	ldi	r18, 0x01	; 1
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	a9 01       	movw	r20, r18
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <__stack+0x97>
     8f2:	44 0f       	add	r20, r20
     8f4:	55 1f       	adc	r21, r21
     8f6:	8a 95       	dec	r24
     8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <__stack+0x93>
     8fa:	45 bb       	out	0x15, r20	; 21
     8fc:	5f ef       	ldi	r21, 0xFF	; 255
     8fe:	6d ee       	ldi	r22, 0xED	; 237
     900:	72 e0       	ldi	r23, 0x02	; 2
     902:	51 50       	subi	r21, 0x01	; 1
     904:	60 40       	sbci	r22, 0x00	; 0
     906:	70 40       	sbci	r23, 0x00	; 0
     908:	e1 f7       	brne	.-8      	; 0x902 <__stack+0xa3>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <__stack+0xad>
     90c:	00 00       	nop
			_delay_ms(delay);
			PORTC = (1<<((next_stepper_port + 2) % 4));
     90e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     912:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     916:	02 96       	adiw	r24, 0x02	; 2
     918:	83 70       	andi	r24, 0x03	; 3
     91a:	90 78       	andi	r25, 0x80	; 128
     91c:	99 23       	and	r25, r25
     91e:	24 f4       	brge	.+8      	; 0x928 <__stack+0xc9>
     920:	01 97       	sbiw	r24, 0x01	; 1
     922:	8c 6f       	ori	r24, 0xFC	; 252
     924:	9f 6f       	ori	r25, 0xFF	; 255
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	21 e0       	ldi	r18, 0x01	; 1
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	a9 01       	movw	r20, r18
     92e:	02 c0       	rjmp	.+4      	; 0x934 <__stack+0xd5>
     930:	44 0f       	add	r20, r20
     932:	55 1f       	adc	r21, r21
     934:	8a 95       	dec	r24
     936:	e2 f7       	brpl	.-8      	; 0x930 <__stack+0xd1>
     938:	45 bb       	out	0x15, r20	; 21
     93a:	5f ef       	ldi	r21, 0xFF	; 255
     93c:	6d ee       	ldi	r22, 0xED	; 237
     93e:	72 e0       	ldi	r23, 0x02	; 2
     940:	51 50       	subi	r21, 0x01	; 1
     942:	60 40       	sbci	r22, 0x00	; 0
     944:	70 40       	sbci	r23, 0x00	; 0
     946:	e1 f7       	brne	.-8      	; 0x940 <__stack+0xe1>
     948:	00 c0       	rjmp	.+0      	; 0x94a <__stack+0xeb>
     94a:	00 00       	nop
			_delay_ms(delay);
			next_stepper_port = (next_stepper_port + 3) % 4;
     94c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     950:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     954:	03 96       	adiw	r24, 0x03	; 3
     956:	83 70       	andi	r24, 0x03	; 3
     958:	90 78       	andi	r25, 0x80	; 128
     95a:	99 23       	and	r25, r25
     95c:	24 f4       	brge	.+8      	; 0x966 <__stack+0x107>
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	8c 6f       	ori	r24, 0xFC	; 252
     962:	9f 6f       	ori	r25, 0xFF	; 255
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     96a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     96e:	62 c1       	rjmp	.+708    	; 0xc34 <__stack+0x3d5>
		}
	}
	else
	{
		if(last_stepper_dir == 'L') next_stepper_port = cus_abs((next_stepper_port - 2), 4);
     970:	9c 34       	cpi	r25, 0x4C	; 76
     972:	69 f4       	brne	.+26     	; 0x98e <__stack+0x12f>
     974:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     978:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     97c:	64 e0       	ldi	r22, 0x04	; 4
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	02 97       	sbiw	r24, 0x02	; 2
     982:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cus_abs>
     986:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     98a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if(next_stepper_port == -1) next_stepper_port = 3;
     98e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     992:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	31 f4       	brne	.+12     	; 0x9a6 <__stack+0x147>
     99a:	83 e0       	ldi	r24, 0x03	; 3
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     9a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if(next_stepper_port < 3 && next_stepper_port > -1) next_stepper_port = (next_stepper_port + 4);	// prevent -ve numbers when calculating modulus
     9a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     9aa:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     9ae:	83 30       	cpi	r24, 0x03	; 3
     9b0:	91 05       	cpc	r25, r1
     9b2:	28 f4       	brcc	.+10     	; 0x9be <__stack+0x15f>
     9b4:	04 96       	adiw	r24, 0x04	; 4
     9b6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     9ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		remainder loops are calculated to achieve +-45deg rotation (45 % 4 = 1 loop)
		the scale of rotation is linear so what can be applied 45deg can be applied to any angle
	*/
	int loop_count;
	int remainder;	//remaining steps to achieve desired step count
	int changed_dir = 0;
     9be:	a1 2c       	mov	r10, r1
     9c0:	b1 2c       	mov	r11, r1
     9c2:	67 c0       	rjmp	.+206    	; 0xa92 <__stack+0x233>
		if(last_stepper_dir == 'L') next_stepper_port = cus_abs((next_stepper_port - 2), 4);
		if(next_stepper_port == -1) next_stepper_port = 3;
		if(next_stepper_port < 3 && next_stepper_port > -1) next_stepper_port = (next_stepper_port + 4);	// prevent -ve numbers when calculating modulus
		for (int i = 0; i < loop_count ; i++)
		{
			PORTC = (1<<cus_abs(next_stepper_port, 4));
     9c4:	64 e0       	ldi	r22, 0x04	; 4
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     9cc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     9d0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cus_abs>
     9d4:	c1 e0       	ldi	r28, 0x01	; 1
     9d6:	d0 e0       	ldi	r29, 0x00	; 0
     9d8:	ae 01       	movw	r20, r28
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <__stack+0x181>
     9dc:	44 0f       	add	r20, r20
     9de:	55 1f       	adc	r21, r21
     9e0:	8a 95       	dec	r24
     9e2:	e2 f7       	brpl	.-8      	; 0x9dc <__stack+0x17d>
     9e4:	45 bb       	out	0x15, r20	; 21
     9e6:	5f ef       	ldi	r21, 0xFF	; 255
     9e8:	6d ee       	ldi	r22, 0xED	; 237
     9ea:	72 e0       	ldi	r23, 0x02	; 2
     9ec:	51 50       	subi	r21, 0x01	; 1
     9ee:	60 40       	sbci	r22, 0x00	; 0
     9f0:	70 40       	sbci	r23, 0x00	; 0
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <__stack+0x18d>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <__stack+0x197>
     9f6:	00 00       	nop
			_delay_ms(delay);
			PORTC = (1<<cus_abs((next_stepper_port - 1), 4));
     9f8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     9fc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     a00:	64 e0       	ldi	r22, 0x04	; 4
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cus_abs>
     a0a:	9e 01       	movw	r18, r28
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <__stack+0x1b3>
     a0e:	22 0f       	add	r18, r18
     a10:	33 1f       	adc	r19, r19
     a12:	8a 95       	dec	r24
     a14:	e2 f7       	brpl	.-8      	; 0xa0e <__stack+0x1af>
     a16:	25 bb       	out	0x15, r18	; 21
     a18:	3f ef       	ldi	r19, 0xFF	; 255
     a1a:	4d ee       	ldi	r20, 0xED	; 237
     a1c:	52 e0       	ldi	r21, 0x02	; 2
     a1e:	31 50       	subi	r19, 0x01	; 1
     a20:	40 40       	sbci	r20, 0x00	; 0
     a22:	50 40       	sbci	r21, 0x00	; 0
     a24:	e1 f7       	brne	.-8      	; 0xa1e <__stack+0x1bf>
     a26:	00 c0       	rjmp	.+0      	; 0xa28 <__stack+0x1c9>
     a28:	00 00       	nop
			_delay_ms(delay);
			PORTC = (1<<cus_abs((next_stepper_port - 2), 4));
     a2a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     a2e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     a32:	64 e0       	ldi	r22, 0x04	; 4
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	02 97       	sbiw	r24, 0x02	; 2
     a38:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cus_abs>
     a3c:	be 01       	movw	r22, r28
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <__stack+0x1e5>
     a40:	66 0f       	add	r22, r22
     a42:	77 1f       	adc	r23, r23
     a44:	8a 95       	dec	r24
     a46:	e2 f7       	brpl	.-8      	; 0xa40 <__stack+0x1e1>
     a48:	65 bb       	out	0x15, r22	; 21
     a4a:	7f ef       	ldi	r23, 0xFF	; 255
     a4c:	8d ee       	ldi	r24, 0xED	; 237
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	71 50       	subi	r23, 0x01	; 1
     a52:	80 40       	sbci	r24, 0x00	; 0
     a54:	90 40       	sbci	r25, 0x00	; 0
     a56:	e1 f7       	brne	.-8      	; 0xa50 <__stack+0x1f1>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <__stack+0x1fb>
     a5a:	00 00       	nop
			_delay_ms(delay);
			PORTC = (1<<cus_abs((next_stepper_port - 3), 4));
     a5c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     a60:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     a64:	64 e0       	ldi	r22, 0x04	; 4
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	03 97       	sbiw	r24, 0x03	; 3
     a6a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cus_abs>
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <__stack+0x215>
     a70:	cc 0f       	add	r28, r28
     a72:	dd 1f       	adc	r29, r29
     a74:	8a 95       	dec	r24
     a76:	e2 f7       	brpl	.-8      	; 0xa70 <__stack+0x211>
     a78:	c5 bb       	out	0x15, r28	; 21
     a7a:	3f ef       	ldi	r19, 0xFF	; 255
     a7c:	4d ee       	ldi	r20, 0xED	; 237
     a7e:	52 e0       	ldi	r21, 0x02	; 2
     a80:	31 50       	subi	r19, 0x01	; 1
     a82:	40 40       	sbci	r20, 0x00	; 0
     a84:	50 40       	sbci	r21, 0x00	; 0
     a86:	e1 f7       	brne	.-8      	; 0xa80 <__stack+0x221>
     a88:	00 c0       	rjmp	.+0      	; 0xa8a <__stack+0x22b>
     a8a:	00 00       	nop
	else
	{
		if(last_stepper_dir == 'L') next_stepper_port = cus_abs((next_stepper_port - 2), 4);
		if(next_stepper_port == -1) next_stepper_port = 3;
		if(next_stepper_port < 3 && next_stepper_port > -1) next_stepper_port = (next_stepper_port + 4);	// prevent -ve numbers when calculating modulus
		for (int i = 0; i < loop_count ; i++)
     a8c:	6f ef       	ldi	r22, 0xFF	; 255
     a8e:	a6 1a       	sub	r10, r22
     a90:	b6 0a       	sbc	r11, r22
     a92:	a0 16       	cp	r10, r16
     a94:	b1 06       	cpc	r11, r17
     a96:	0c f4       	brge	.+2      	; 0xa9a <__stack+0x23b>
     a98:	95 cf       	rjmp	.-214    	; 0x9c4 <__stack+0x165>
			PORTC = (1<<cus_abs((next_stepper_port - 2), 4));
			_delay_ms(delay);
			PORTC = (1<<cus_abs((next_stepper_port - 3), 4));
			_delay_ms(delay);
		}
		if (remainder == 1)
     a9a:	71 e0       	ldi	r23, 0x01	; 1
     a9c:	e7 16       	cp	r14, r23
     a9e:	f1 04       	cpc	r15, r1
     aa0:	39 f5       	brne	.+78     	; 0xaf0 <__stack+0x291>
		{
			PORTC = (1<<cus_abs(next_stepper_port, 4));
     aa2:	64 e0       	ldi	r22, 0x04	; 4
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     aaa:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     aae:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cus_abs>
     ab2:	21 e0       	ldi	r18, 0x01	; 1
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <__stack+0x25d>
     ab8:	22 0f       	add	r18, r18
     aba:	33 1f       	adc	r19, r19
     abc:	8a 95       	dec	r24
     abe:	e2 f7       	brpl	.-8      	; 0xab8 <__stack+0x259>
     ac0:	25 bb       	out	0x15, r18	; 21
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	9d ee       	ldi	r25, 0xED	; 237
     ac6:	22 e0       	ldi	r18, 0x02	; 2
     ac8:	81 50       	subi	r24, 0x01	; 1
     aca:	90 40       	sbci	r25, 0x00	; 0
     acc:	20 40       	sbci	r18, 0x00	; 0
     ace:	e1 f7       	brne	.-8      	; 0xac8 <__stack+0x269>
     ad0:	00 c0       	rjmp	.+0      	; 0xad2 <__stack+0x273>
     ad2:	00 00       	nop
			_delay_ms(delay);
			next_stepper_port = cus_abs((next_stepper_port - 1), 4);
     ad4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     ad8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     adc:	64 e0       	ldi	r22, 0x04	; 4
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	01 97       	sbiw	r24, 0x01	; 1
     ae2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cus_abs>
     ae6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     aea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     aee:	a2 c0       	rjmp	.+324    	; 0xc34 <__stack+0x3d5>
		}
		else if(remainder == 2)
     af0:	32 e0       	ldi	r19, 0x02	; 2
     af2:	e3 16       	cp	r14, r19
     af4:	f1 04       	cpc	r15, r1
     af6:	09 f0       	breq	.+2      	; 0xafa <__stack+0x29b>
     af8:	40 c0       	rjmp	.+128    	; 0xb7a <__stack+0x31b>
		{
			PORTC = (1<<cus_abs(next_stepper_port, 4));
     afa:	64 e0       	ldi	r22, 0x04	; 4
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b02:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     b06:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cus_abs>
     b0a:	c1 e0       	ldi	r28, 0x01	; 1
     b0c:	d0 e0       	ldi	r29, 0x00	; 0
     b0e:	ae 01       	movw	r20, r28
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <__stack+0x2b7>
     b12:	44 0f       	add	r20, r20
     b14:	55 1f       	adc	r21, r21
     b16:	8a 95       	dec	r24
     b18:	e2 f7       	brpl	.-8      	; 0xb12 <__stack+0x2b3>
     b1a:	45 bb       	out	0x15, r20	; 21
     b1c:	5f ef       	ldi	r21, 0xFF	; 255
     b1e:	6d ee       	ldi	r22, 0xED	; 237
     b20:	72 e0       	ldi	r23, 0x02	; 2
     b22:	51 50       	subi	r21, 0x01	; 1
     b24:	60 40       	sbci	r22, 0x00	; 0
     b26:	70 40       	sbci	r23, 0x00	; 0
     b28:	e1 f7       	brne	.-8      	; 0xb22 <__stack+0x2c3>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <__stack+0x2cd>
     b2c:	00 00       	nop
			_delay_ms(delay);
			PORTC = (1<<cus_abs((next_stepper_port - 1), 4));
     b2e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b32:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     b36:	64 e0       	ldi	r22, 0x04	; 4
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cus_abs>
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <__stack+0x2e7>
     b42:	cc 0f       	add	r28, r28
     b44:	dd 1f       	adc	r29, r29
     b46:	8a 95       	dec	r24
     b48:	e2 f7       	brpl	.-8      	; 0xb42 <__stack+0x2e3>
     b4a:	c5 bb       	out	0x15, r28	; 21
     b4c:	9f ef       	ldi	r25, 0xFF	; 255
     b4e:	2d ee       	ldi	r18, 0xED	; 237
     b50:	32 e0       	ldi	r19, 0x02	; 2
     b52:	91 50       	subi	r25, 0x01	; 1
     b54:	20 40       	sbci	r18, 0x00	; 0
     b56:	30 40       	sbci	r19, 0x00	; 0
     b58:	e1 f7       	brne	.-8      	; 0xb52 <__stack+0x2f3>
     b5a:	00 c0       	rjmp	.+0      	; 0xb5c <__stack+0x2fd>
     b5c:	00 00       	nop
			_delay_ms(delay);
			next_stepper_port = cus_abs((next_stepper_port - 2), 4);
     b5e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b62:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     b66:	64 e0       	ldi	r22, 0x04	; 4
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	02 97       	sbiw	r24, 0x02	; 2
     b6c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cus_abs>
     b70:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     b74:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     b78:	5d c0       	rjmp	.+186    	; 0xc34 <__stack+0x3d5>
		}
		else if(remainder == 3)
     b7a:	43 e0       	ldi	r20, 0x03	; 3
     b7c:	e4 16       	cp	r14, r20
     b7e:	f1 04       	cpc	r15, r1
     b80:	09 f0       	breq	.+2      	; 0xb84 <__stack+0x325>
     b82:	58 c0       	rjmp	.+176    	; 0xc34 <__stack+0x3d5>
		{
			PORTC = (1<<cus_abs(next_stepper_port, 4));
     b84:	64 e0       	ldi	r22, 0x04	; 4
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b8c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     b90:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cus_abs>
     b94:	c1 e0       	ldi	r28, 0x01	; 1
     b96:	d0 e0       	ldi	r29, 0x00	; 0
     b98:	be 01       	movw	r22, r28
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <__stack+0x341>
     b9c:	66 0f       	add	r22, r22
     b9e:	77 1f       	adc	r23, r23
     ba0:	8a 95       	dec	r24
     ba2:	e2 f7       	brpl	.-8      	; 0xb9c <__stack+0x33d>
     ba4:	65 bb       	out	0x15, r22	; 21
     ba6:	7f ef       	ldi	r23, 0xFF	; 255
     ba8:	8d ee       	ldi	r24, 0xED	; 237
     baa:	92 e0       	ldi	r25, 0x02	; 2
     bac:	71 50       	subi	r23, 0x01	; 1
     bae:	80 40       	sbci	r24, 0x00	; 0
     bb0:	90 40       	sbci	r25, 0x00	; 0
     bb2:	e1 f7       	brne	.-8      	; 0xbac <__stack+0x34d>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <__stack+0x357>
     bb6:	00 00       	nop
			_delay_ms(delay);
			PORTC = (1<<cus_abs((next_stepper_port - 1), 4));
     bb8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     bbc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     bc0:	64 e0       	ldi	r22, 0x04	; 4
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cus_abs>
     bca:	9e 01       	movw	r18, r28
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <__stack+0x373>
     bce:	22 0f       	add	r18, r18
     bd0:	33 1f       	adc	r19, r19
     bd2:	8a 95       	dec	r24
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <__stack+0x36f>
     bd6:	25 bb       	out	0x15, r18	; 21
     bd8:	3f ef       	ldi	r19, 0xFF	; 255
     bda:	4d ee       	ldi	r20, 0xED	; 237
     bdc:	52 e0       	ldi	r21, 0x02	; 2
     bde:	31 50       	subi	r19, 0x01	; 1
     be0:	40 40       	sbci	r20, 0x00	; 0
     be2:	50 40       	sbci	r21, 0x00	; 0
     be4:	e1 f7       	brne	.-8      	; 0xbde <__stack+0x37f>
     be6:	00 c0       	rjmp	.+0      	; 0xbe8 <__stack+0x389>
     be8:	00 00       	nop
			_delay_ms(delay);
			PORTC = (1<<cus_abs((next_stepper_port - 2), 4));
     bea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     bee:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     bf2:	64 e0       	ldi	r22, 0x04	; 4
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	02 97       	sbiw	r24, 0x02	; 2
     bf8:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cus_abs>
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <__stack+0x3a3>
     bfe:	cc 0f       	add	r28, r28
     c00:	dd 1f       	adc	r29, r29
     c02:	8a 95       	dec	r24
     c04:	e2 f7       	brpl	.-8      	; 0xbfe <__stack+0x39f>
     c06:	c5 bb       	out	0x15, r28	; 21
     c08:	7f ef       	ldi	r23, 0xFF	; 255
     c0a:	8d ee       	ldi	r24, 0xED	; 237
     c0c:	92 e0       	ldi	r25, 0x02	; 2
     c0e:	71 50       	subi	r23, 0x01	; 1
     c10:	80 40       	sbci	r24, 0x00	; 0
     c12:	90 40       	sbci	r25, 0x00	; 0
     c14:	e1 f7       	brne	.-8      	; 0xc0e <__stack+0x3af>
     c16:	00 c0       	rjmp	.+0      	; 0xc18 <__stack+0x3b9>
     c18:	00 00       	nop
			_delay_ms(delay);
			next_stepper_port = cus_abs((next_stepper_port - 3), 4);
     c1a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     c1e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     c22:	64 e0       	ldi	r22, 0x04	; 4
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	03 97       	sbiw	r24, 0x03	; 3
     c28:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cus_abs>
     c2c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     c30:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
	}
	if(changed_dir == 1)
     c34:	ca 94       	dec	r12
     c36:	cd 28       	or	r12, r13
     c38:	81 f5       	brne	.+96     	; 0xc9a <__stack+0x43b>
	{
		if(dir == 'R')
     c3a:	32 e5       	ldi	r19, 0x52	; 82
     c3c:	93 12       	cpse	r9, r19
     c3e:	1c c0       	rjmp	.+56     	; 0xc78 <__stack+0x419>
		{
			last_stepper_dir = 'L';
     c40:	8c e4       	ldi	r24, 0x4C	; 76
     c42:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <last_stepper_dir>
			next_stepper_port = (next_stepper_port + 2) % 4;	//emulate the final next port location when last stepper dir is actually L
     c46:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     c4a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     c4e:	02 96       	adiw	r24, 0x02	; 2
     c50:	83 70       	andi	r24, 0x03	; 3
     c52:	90 78       	andi	r25, 0x80	; 128
     c54:	99 23       	and	r25, r25
     c56:	24 f4       	brge	.+8      	; 0xc60 <__stack+0x401>
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	8c 6f       	ori	r24, 0xFC	; 252
     c5c:	9f 6f       	ori	r25, 0xFF	; 255
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     c64:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			if(next_stepper_port < 0) next_stepper_port = next_stepper_port + 4;
     c68:	99 23       	and	r25, r25
     c6a:	cc f4       	brge	.+50     	; 0xc9e <__stack+0x43f>
     c6c:	04 96       	adiw	r24, 0x04	; 4
     c6e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     c72:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     c76:	13 c0       	rjmp	.+38     	; 0xc9e <__stack+0x43f>
		}
		else
		{
			 last_stepper_dir = 'R';
     c78:	82 e5       	ldi	r24, 0x52	; 82
     c7a:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <last_stepper_dir>
			 next_stepper_port = cus_abs((next_stepper_port - 2), 4);	//emulate the final next port location when last stepper dir is actually R
     c7e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     c82:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     c86:	64 e0       	ldi	r22, 0x04	; 4
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	02 97       	sbiw	r24, 0x02	; 2
     c8c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cus_abs>
     c90:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     c94:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <__stack+0x43f>
		}
	}
	else last_stepper_dir = dir;
     c9a:	90 92 a8 00 	sts	0x00A8, r9	; 0x8000a8 <last_stepper_dir>
}
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	ff 90       	pop	r15
     ca8:	ef 90       	pop	r14
     caa:	df 90       	pop	r13
     cac:	cf 90       	pop	r12
     cae:	bf 90       	pop	r11
     cb0:	af 90       	pop	r10
     cb2:	9f 90       	pop	r9
     cb4:	08 95       	ret

00000cb6 <message_handler>:
int last_stepper_step = 0;	
char last_stepper_dir = 0;
int next_stepper_port = -1;

void message_handler(char ch)
{
     cb6:	cf 92       	push	r12
     cb8:	df 92       	push	r13
     cba:	ef 92       	push	r14
     cbc:	ff 92       	push	r15
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	27 97       	sbiw	r28, 0x07	; 7
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
	if(ch == '\r')
     cd6:	8d 30       	cpi	r24, 0x0D	; 13
     cd8:	09 f0       	breq	.+2      	; 0xcdc <message_handler+0x26>
     cda:	9e c0       	rjmp	.+316    	; 0xe18 <message_handler+0x162>
	{
		if(ch_index > BUFFER_SIZE)
     cdc:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <ch_index>
     ce0:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <ch_index+0x1>
     ce4:	09 97       	sbiw	r24, 0x09	; 9
     ce6:	2c f0       	brlt	.+10     	; 0xcf2 <message_handler+0x3c>
		{
			UART_SendString("INVALID MESSAGE\r");
     ce8:	85 e8       	ldi	r24, 0x85	; 133
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0e 94 55 00 	call	0xaa	; 0xaa <UART_SendString>
     cf0:	90 c0       	rjmp	.+288    	; 0xe12 <message_handler+0x15c>
		}
		else if (isdigit(str[0]) && isdigit(str[1]) && isdigit(str[2]) && isdigit(str[4]) && isdigit(str[5]) && (str[3] == 'F' || str[3] == 'B') && (str[6] == 'R' || str[6] == 'L') && str[7] == 'E')
     cf2:	20 91 ad 00 	lds	r18, 0x00AD	; 0x8000ad <str>
     cf6:	82 2f       	mov	r24, r18
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	c0 97       	sbiw	r24, 0x30	; 48
     cfc:	0a 97       	sbiw	r24, 0x0a	; 10
     cfe:	08 f0       	brcs	.+2      	; 0xd02 <message_handler+0x4c>
     d00:	84 c0       	rjmp	.+264    	; 0xe0a <message_handler+0x154>
     d02:	30 91 ae 00 	lds	r19, 0x00AE	; 0x8000ae <str+0x1>
     d06:	83 2f       	mov	r24, r19
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	c0 97       	sbiw	r24, 0x30	; 48
     d0c:	0a 97       	sbiw	r24, 0x0a	; 10
     d0e:	08 f0       	brcs	.+2      	; 0xd12 <message_handler+0x5c>
     d10:	7c c0       	rjmp	.+248    	; 0xe0a <message_handler+0x154>
     d12:	40 91 af 00 	lds	r20, 0x00AF	; 0x8000af <str+0x2>
     d16:	84 2f       	mov	r24, r20
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	c0 97       	sbiw	r24, 0x30	; 48
     d1c:	0a 97       	sbiw	r24, 0x0a	; 10
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <message_handler+0x6c>
     d20:	74 c0       	rjmp	.+232    	; 0xe0a <message_handler+0x154>
     d22:	50 91 b1 00 	lds	r21, 0x00B1	; 0x8000b1 <str+0x4>
     d26:	85 2f       	mov	r24, r21
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	c0 97       	sbiw	r24, 0x30	; 48
     d2c:	0a 97       	sbiw	r24, 0x0a	; 10
     d2e:	08 f0       	brcs	.+2      	; 0xd32 <message_handler+0x7c>
     d30:	6c c0       	rjmp	.+216    	; 0xe0a <message_handler+0x154>
     d32:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <str+0x5>
     d36:	86 2f       	mov	r24, r22
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	c0 97       	sbiw	r24, 0x30	; 48
     d3c:	0a 97       	sbiw	r24, 0x0a	; 10
     d3e:	08 f0       	brcs	.+2      	; 0xd42 <message_handler+0x8c>
     d40:	64 c0       	rjmp	.+200    	; 0xe0a <message_handler+0x154>
     d42:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <str+0x3>
     d46:	86 34       	cpi	r24, 0x46	; 70
     d48:	19 f0       	breq	.+6      	; 0xd50 <message_handler+0x9a>
     d4a:	82 34       	cpi	r24, 0x42	; 66
     d4c:	09 f0       	breq	.+2      	; 0xd50 <message_handler+0x9a>
     d4e:	5d c0       	rjmp	.+186    	; 0xe0a <message_handler+0x154>
     d50:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <str+0x6>
     d54:	82 35       	cpi	r24, 0x52	; 82
     d56:	19 f0       	breq	.+6      	; 0xd5e <message_handler+0xa8>
     d58:	8c 34       	cpi	r24, 0x4C	; 76
     d5a:	09 f0       	breq	.+2      	; 0xd5e <message_handler+0xa8>
     d5c:	56 c0       	rjmp	.+172    	; 0xe0a <message_handler+0x154>
     d5e:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <str+0x7>
     d62:	85 34       	cpi	r24, 0x45	; 69
     d64:	09 f0       	breq	.+2      	; 0xd68 <message_handler+0xb2>
     d66:	51 c0       	rjmp	.+162    	; 0xe0a <message_handler+0x154>
		{
			char ch_stepper[] = {str[4], str[5], 0};
     d68:	5d 83       	std	Y+5, r21	; 0x05
     d6a:	6e 83       	std	Y+6, r22	; 0x06
     d6c:	1f 82       	std	Y+7, r1	; 0x07
			char ch_dc[] = {str[0], str[1], str[2], 0};
     d6e:	29 83       	std	Y+1, r18	; 0x01
     d70:	3a 83       	std	Y+2, r19	; 0x02
     d72:	4b 83       	std	Y+3, r20	; 0x03
     d74:	1c 82       	std	Y+4, r1	; 0x04
			int dc_val = atoi(ch_dc);
     d76:	ce 01       	movw	r24, r28
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <atoi>
     d7e:	7c 01       	movw	r14, r24
			int stepper_val = atoi(ch_stepper);
     d80:	ce 01       	movw	r24, r28
     d82:	05 96       	adiw	r24, 0x05	; 5
     d84:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <atoi>
     d88:	8c 01       	movw	r16, r24
			int servo_val = stepper_val;
			if (dc_val <= 100 && stepper_val <= 45)
     d8a:	85 e6       	ldi	r24, 0x65	; 101
     d8c:	e8 16       	cp	r14, r24
     d8e:	f1 04       	cpc	r15, r1
     d90:	bc f5       	brge	.+110    	; 0xe00 <message_handler+0x14a>
     d92:	0e 32       	cpi	r16, 0x2E	; 46
     d94:	11 05       	cpc	r17, r1
     d96:	a4 f5       	brge	.+104    	; 0xe00 <message_handler+0x14a>
			{
				// Handle Correct message
				lcd_print_data(dc_val, stepper_val);
     d98:	b8 01       	movw	r22, r16
     d9a:	c7 01       	movw	r24, r14
     d9c:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_print_data>
				set_dc(dc_val, str[3]);
     da0:	0f 2e       	mov	r0, r31
     da2:	fd ea       	ldi	r31, 0xAD	; 173
     da4:	cf 2e       	mov	r12, r31
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	df 2e       	mov	r13, r31
     daa:	f0 2d       	mov	r31, r0
     dac:	f6 01       	movw	r30, r12
     dae:	63 81       	ldd	r22, Z+3	; 0x03
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	c7 01       	movw	r24, r14
     db4:	0e 94 33 02 	call	0x466	; 0x466 <set_dc>
				if(((last_stepper_dir != str[6] && stepper_val != 0) | (last_stepper_step != stepper_val)))
     db8:	f6 01       	movw	r30, r12
     dba:	66 81       	ldd	r22, Z+6	; 0x06
     dbc:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <last_stepper_dir>
     dc0:	68 17       	cp	r22, r24
     dc2:	29 f0       	breq	.+10     	; 0xdce <message_handler+0x118>
     dc4:	01 15       	cp	r16, r1
     dc6:	11 05       	cpc	r17, r1
     dc8:	21 f4       	brne	.+8      	; 0xdd2 <message_handler+0x11c>
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	03 c0       	rjmp	.+6      	; 0xdd4 <message_handler+0x11e>
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	01 c0       	rjmp	.+2      	; 0xdd4 <message_handler+0x11e>
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <last_stepper_step>
     dda:	30 91 aa 00 	lds	r19, 0x00AA	; 0x8000aa <last_stepper_step+0x1>
     dde:	20 17       	cp	r18, r16
     de0:	31 07       	cpc	r19, r17
     de2:	09 f4       	brne	.+2      	; 0xde6 <message_handler+0x130>
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	89 2b       	or	r24, r25
     de8:	a1 f0       	breq	.+40     	; 0xe12 <message_handler+0x15c>
				{
					set_stepper(stepper_val, str[6]);
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	c8 01       	movw	r24, r16
     dee:	0e 94 87 02 	call	0x50e	; 0x50e <set_stepper>
					set_servo(servo_val, str[6]);
     df2:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <str+0x6>
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	c8 01       	movw	r24, r16
     dfa:	0e 94 51 02 	call	0x4a2	; 0x4a2 <set_servo>
     dfe:	09 c0       	rjmp	.+18     	; 0xe12 <message_handler+0x15c>
				}
			}
			else
			{
				UART_SendString("INVALID MESSAGE\r");
     e00:	85 e8       	ldi	r24, 0x85	; 133
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 55 00 	call	0xaa	; 0xaa <UART_SendString>
		if(ch_index > BUFFER_SIZE)
		{
			UART_SendString("INVALID MESSAGE\r");
		}
		else if (isdigit(str[0]) && isdigit(str[1]) && isdigit(str[2]) && isdigit(str[4]) && isdigit(str[5]) && (str[3] == 'F' || str[3] == 'B') && (str[6] == 'R' || str[6] == 'L') && str[7] == 'E')
		{
     e08:	04 c0       	rjmp	.+8      	; 0xe12 <message_handler+0x15c>
				UART_SendString("INVALID MESSAGE\r");
			}
		}
		else
		{
			UART_SendString("INVALID MESSAGE\r");
     e0a:	85 e8       	ldi	r24, 0x85	; 133
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 55 00 	call	0xaa	; 0xaa <UART_SendString>
		}
		clear_str();
     e12:	0e 94 1d 01 	call	0x23a	; 0x23a <clear_str>
     e16:	18 c0       	rjmp	.+48     	; 0xe48 <message_handler+0x192>
	}
	else if (ch_index < BUFFER_SIZE)
     e18:	20 91 ab 00 	lds	r18, 0x00AB	; 0x8000ab <ch_index>
     e1c:	30 91 ac 00 	lds	r19, 0x00AC	; 0x8000ac <ch_index+0x1>
     e20:	28 30       	cpi	r18, 0x08	; 8
     e22:	31 05       	cpc	r19, r1
     e24:	5c f4       	brge	.+22     	; 0xe3c <message_handler+0x186>
	{
		str[ch_index] = ch;
     e26:	f9 01       	movw	r30, r18
     e28:	e3 55       	subi	r30, 0x53	; 83
     e2a:	ff 4f       	sbci	r31, 0xFF	; 255
     e2c:	80 83       	st	Z, r24
		ch_index++;
     e2e:	2f 5f       	subi	r18, 0xFF	; 255
     e30:	3f 4f       	sbci	r19, 0xFF	; 255
     e32:	30 93 ac 00 	sts	0x00AC, r19	; 0x8000ac <ch_index+0x1>
     e36:	20 93 ab 00 	sts	0x00AB, r18	; 0x8000ab <ch_index>
     e3a:	06 c0       	rjmp	.+12     	; 0xe48 <message_handler+0x192>
	}
	else
	{
		ch_index++;
     e3c:	2f 5f       	subi	r18, 0xFF	; 255
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	30 93 ac 00 	sts	0x00AC, r19	; 0x8000ac <ch_index+0x1>
     e44:	20 93 ab 00 	sts	0x00AB, r18	; 0x8000ab <ch_index>
	}
	
}
     e48:	27 96       	adiw	r28, 0x07	; 7
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	df 90       	pop	r13
     e62:	cf 90       	pop	r12
     e64:	08 95       	ret

00000e66 <__vector_13>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "control.h"

ISR(USART_RXC_vect)
{
     e66:	1f 92       	push	r1
     e68:	0f 92       	push	r0
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	0f 92       	push	r0
     e6e:	11 24       	eor	r1, r1
     e70:	2f 93       	push	r18
     e72:	3f 93       	push	r19
     e74:	4f 93       	push	r20
     e76:	5f 93       	push	r21
     e78:	6f 93       	push	r22
     e7a:	7f 93       	push	r23
     e7c:	8f 93       	push	r24
     e7e:	9f 93       	push	r25
     e80:	af 93       	push	r26
     e82:	bf 93       	push	r27
     e84:	ef 93       	push	r30
     e86:	ff 93       	push	r31
	/* received message causes interrupt */
	while(!(UCSRA & (1<<RXC)));
     e88:	5f 9b       	sbis	0x0b, 7	; 11
     e8a:	fe cf       	rjmp	.-4      	; 0xe88 <__vector_13+0x22>
	char received = UDR;
     e8c:	8c b1       	in	r24, 0x0c	; 12
	message_handler(received);
     e8e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <message_handler>
}
     e92:	ff 91       	pop	r31
     e94:	ef 91       	pop	r30
     e96:	bf 91       	pop	r27
     e98:	af 91       	pop	r26
     e9a:	9f 91       	pop	r25
     e9c:	8f 91       	pop	r24
     e9e:	7f 91       	pop	r23
     ea0:	6f 91       	pop	r22
     ea2:	5f 91       	pop	r21
     ea4:	4f 91       	pop	r20
     ea6:	3f 91       	pop	r19
     ea8:	2f 91       	pop	r18
     eaa:	0f 90       	pop	r0
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	0f 90       	pop	r0
     eb0:	1f 90       	pop	r1
     eb2:	18 95       	reti

00000eb4 <__vector_5>:

int timer_counter = 0;

ISR(TIMER2_OVF_vect)
{
     eb4:	1f 92       	push	r1
     eb6:	0f 92       	push	r0
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	0f 92       	push	r0
     ebc:	11 24       	eor	r1, r1
     ebe:	2f 93       	push	r18
     ec0:	3f 93       	push	r19
     ec2:	4f 93       	push	r20
     ec4:	5f 93       	push	r21
     ec6:	6f 93       	push	r22
     ec8:	7f 93       	push	r23
     eca:	8f 93       	push	r24
     ecc:	9f 93       	push	r25
     ece:	af 93       	push	r26
     ed0:	bf 93       	push	r27
     ed2:	ef 93       	push	r30
     ed4:	ff 93       	push	r31
	timer_counter++;
     ed6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
     eda:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <__data_end+0x1>
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__data_end+0x1>
     ee4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
	TCNT2 = 177;	// reset the timer
     ee8:	81 eb       	ldi	r24, 0xB1	; 177
     eea:	84 bd       	out	0x24, r24	; 36
	if(timer_counter >= 100)
     eec:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
     ef0:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <__data_end+0x1>
     ef4:	84 36       	cpi	r24, 0x64	; 100
     ef6:	91 05       	cpc	r25, r1
     ef8:	34 f0       	brlt	.+12     	; 0xf06 <__vector_5+0x52>
	{
		lcd_print_time();
     efa:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_print_time>
		timer_counter = 0;
     efe:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__data_end+0x1>
     f02:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
	}
}
     f06:	ff 91       	pop	r31
     f08:	ef 91       	pop	r30
     f0a:	bf 91       	pop	r27
     f0c:	af 91       	pop	r26
     f0e:	9f 91       	pop	r25
     f10:	8f 91       	pop	r24
     f12:	7f 91       	pop	r23
     f14:	6f 91       	pop	r22
     f16:	5f 91       	pop	r21
     f18:	4f 91       	pop	r20
     f1a:	3f 91       	pop	r19
     f1c:	2f 91       	pop	r18
     f1e:	0f 90       	pop	r0
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	0f 90       	pop	r0
     f24:	1f 90       	pop	r1
     f26:	18 95       	reti

00000f28 <main>:

int main(void)
{
    UART_Init();
     f28:	0e 94 49 00 	call	0x92	; 0x92 <UART_Init>
	DDRA = 0xFF; // set LCD data port as output for LCD
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xE0; // set LCD signals (RS, RW, E) as output for LCD
     f30:	80 ee       	ldi	r24, 0xE0	; 224
     f32:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1<<PB1) | (1<<PB2);	// set output pins to DC motor H-bridge
     f34:	87 b3       	in	r24, 0x17	; 23
     f36:	86 60       	ori	r24, 0x06	; 6
     f38:	87 bb       	out	0x17, r24	; 23
	DDRC |= (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3);	// set output pins to stepper motor H-bridge
     f3a:	84 b3       	in	r24, 0x14	; 20
     f3c:	8f 60       	ori	r24, 0x0F	; 15
     f3e:	84 bb       	out	0x14, r24	; 20
	
	init_LCD(); // initialize LCD
     f40:	0e 94 7f 00 	call	0xfe	; 0xfe <init_LCD>
	LCD_cmd(0x0C); // display on, cursor off
     f44:	8c e0       	ldi	r24, 0x0C	; 12
     f46:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_cmd>
	LCD_cmd(0xC0);	// go to second line
     f4a:	80 ec       	ldi	r24, 0xC0	; 192
     f4c:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_cmd>
	LCD_write_string("Time: 00:00:00");
     f50:	86 e9       	ldi	r24, 0x96	; 150
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_write_string>
	
	pwm_init();
     f58:	0e 94 16 01 	call	0x22c	; 0x22c <pwm_init>
	
	sei();
     f5c:	78 94       	sei
     f5e:	ff cf       	rjmp	.-2      	; 0xf5e <main+0x36>

00000f60 <__divmodhi4>:
     f60:	97 fb       	bst	r25, 7
     f62:	07 2e       	mov	r0, r23
     f64:	16 f4       	brtc	.+4      	; 0xf6a <__divmodhi4+0xa>
     f66:	00 94       	com	r0
     f68:	07 d0       	rcall	.+14     	; 0xf78 <__divmodhi4_neg1>
     f6a:	77 fd       	sbrc	r23, 7
     f6c:	09 d0       	rcall	.+18     	; 0xf80 <__divmodhi4_neg2>
     f6e:	0e 94 c4 07 	call	0xf88	; 0xf88 <__udivmodhi4>
     f72:	07 fc       	sbrc	r0, 7
     f74:	05 d0       	rcall	.+10     	; 0xf80 <__divmodhi4_neg2>
     f76:	3e f4       	brtc	.+14     	; 0xf86 <__divmodhi4_exit>

00000f78 <__divmodhi4_neg1>:
     f78:	90 95       	com	r25
     f7a:	81 95       	neg	r24
     f7c:	9f 4f       	sbci	r25, 0xFF	; 255
     f7e:	08 95       	ret

00000f80 <__divmodhi4_neg2>:
     f80:	70 95       	com	r23
     f82:	61 95       	neg	r22
     f84:	7f 4f       	sbci	r23, 0xFF	; 255

00000f86 <__divmodhi4_exit>:
     f86:	08 95       	ret

00000f88 <__udivmodhi4>:
     f88:	aa 1b       	sub	r26, r26
     f8a:	bb 1b       	sub	r27, r27
     f8c:	51 e1       	ldi	r21, 0x11	; 17
     f8e:	07 c0       	rjmp	.+14     	; 0xf9e <__udivmodhi4_ep>

00000f90 <__udivmodhi4_loop>:
     f90:	aa 1f       	adc	r26, r26
     f92:	bb 1f       	adc	r27, r27
     f94:	a6 17       	cp	r26, r22
     f96:	b7 07       	cpc	r27, r23
     f98:	10 f0       	brcs	.+4      	; 0xf9e <__udivmodhi4_ep>
     f9a:	a6 1b       	sub	r26, r22
     f9c:	b7 0b       	sbc	r27, r23

00000f9e <__udivmodhi4_ep>:
     f9e:	88 1f       	adc	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	5a 95       	dec	r21
     fa4:	a9 f7       	brne	.-22     	; 0xf90 <__udivmodhi4_loop>
     fa6:	80 95       	com	r24
     fa8:	90 95       	com	r25
     faa:	bc 01       	movw	r22, r24
     fac:	cd 01       	movw	r24, r26
     fae:	08 95       	ret

00000fb0 <atoi>:
     fb0:	fc 01       	movw	r30, r24
     fb2:	88 27       	eor	r24, r24
     fb4:	99 27       	eor	r25, r25
     fb6:	e8 94       	clt
     fb8:	21 91       	ld	r18, Z+
     fba:	20 32       	cpi	r18, 0x20	; 32
     fbc:	e9 f3       	breq	.-6      	; 0xfb8 <atoi+0x8>
     fbe:	29 30       	cpi	r18, 0x09	; 9
     fc0:	10 f0       	brcs	.+4      	; 0xfc6 <atoi+0x16>
     fc2:	2e 30       	cpi	r18, 0x0E	; 14
     fc4:	c8 f3       	brcs	.-14     	; 0xfb8 <atoi+0x8>
     fc6:	2b 32       	cpi	r18, 0x2B	; 43
     fc8:	41 f0       	breq	.+16     	; 0xfda <atoi+0x2a>
     fca:	2d 32       	cpi	r18, 0x2D	; 45
     fcc:	39 f4       	brne	.+14     	; 0xfdc <atoi+0x2c>
     fce:	68 94       	set
     fd0:	04 c0       	rjmp	.+8      	; 0xfda <atoi+0x2a>
     fd2:	0e 94 f6 07 	call	0xfec	; 0xfec <__mulhi_const_10>
     fd6:	82 0f       	add	r24, r18
     fd8:	91 1d       	adc	r25, r1
     fda:	21 91       	ld	r18, Z+
     fdc:	20 53       	subi	r18, 0x30	; 48
     fde:	2a 30       	cpi	r18, 0x0A	; 10
     fe0:	c0 f3       	brcs	.-16     	; 0xfd2 <atoi+0x22>
     fe2:	1e f4       	brtc	.+6      	; 0xfea <atoi+0x3a>
     fe4:	90 95       	com	r25
     fe6:	81 95       	neg	r24
     fe8:	9f 4f       	sbci	r25, 0xFF	; 255
     fea:	08 95       	ret

00000fec <__mulhi_const_10>:
     fec:	7a e0       	ldi	r23, 0x0A	; 10
     fee:	97 9f       	mul	r25, r23
     ff0:	90 2d       	mov	r25, r0
     ff2:	87 9f       	mul	r24, r23
     ff4:	80 2d       	mov	r24, r0
     ff6:	91 0d       	add	r25, r1
     ff8:	11 24       	eor	r1, r1
     ffa:	08 95       	ret

00000ffc <sprintf>:
     ffc:	ae e0       	ldi	r26, 0x0E	; 14
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e4 e0       	ldi	r30, 0x04	; 4
    1002:	f8 e0       	ldi	r31, 0x08	; 8
    1004:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__prologue_saves__+0x1c>
    1008:	0d 89       	ldd	r16, Y+21	; 0x15
    100a:	1e 89       	ldd	r17, Y+22	; 0x16
    100c:	86 e0       	ldi	r24, 0x06	; 6
    100e:	8c 83       	std	Y+4, r24	; 0x04
    1010:	1a 83       	std	Y+2, r17	; 0x02
    1012:	09 83       	std	Y+1, r16	; 0x01
    1014:	8f ef       	ldi	r24, 0xFF	; 255
    1016:	9f e7       	ldi	r25, 0x7F	; 127
    1018:	9e 83       	std	Y+6, r25	; 0x06
    101a:	8d 83       	std	Y+5, r24	; 0x05
    101c:	ae 01       	movw	r20, r28
    101e:	47 5e       	subi	r20, 0xE7	; 231
    1020:	5f 4f       	sbci	r21, 0xFF	; 255
    1022:	6f 89       	ldd	r22, Y+23	; 0x17
    1024:	78 8d       	ldd	r23, Y+24	; 0x18
    1026:	ce 01       	movw	r24, r28
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	0e 94 20 08 	call	0x1040	; 0x1040 <vfprintf>
    102e:	ef 81       	ldd	r30, Y+7	; 0x07
    1030:	f8 85       	ldd	r31, Y+8	; 0x08
    1032:	e0 0f       	add	r30, r16
    1034:	f1 1f       	adc	r31, r17
    1036:	10 82       	st	Z, r1
    1038:	2e 96       	adiw	r28, 0x0e	; 14
    103a:	e4 e0       	ldi	r30, 0x04	; 4
    103c:	0c 94 db 0a 	jmp	0x15b6	; 0x15b6 <__epilogue_restores__+0x1c>

00001040 <vfprintf>:
    1040:	ab e0       	ldi	r26, 0x0B	; 11
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e6 e2       	ldi	r30, 0x26	; 38
    1046:	f8 e0       	ldi	r31, 0x08	; 8
    1048:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__prologue_saves__>
    104c:	6c 01       	movw	r12, r24
    104e:	7b 01       	movw	r14, r22
    1050:	8a 01       	movw	r16, r20
    1052:	fc 01       	movw	r30, r24
    1054:	17 82       	std	Z+7, r1	; 0x07
    1056:	16 82       	std	Z+6, r1	; 0x06
    1058:	83 81       	ldd	r24, Z+3	; 0x03
    105a:	81 ff       	sbrs	r24, 1
    105c:	cc c1       	rjmp	.+920    	; 0x13f6 <vfprintf+0x3b6>
    105e:	ce 01       	movw	r24, r28
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	3c 01       	movw	r6, r24
    1064:	f6 01       	movw	r30, r12
    1066:	93 81       	ldd	r25, Z+3	; 0x03
    1068:	f7 01       	movw	r30, r14
    106a:	93 fd       	sbrc	r25, 3
    106c:	85 91       	lpm	r24, Z+
    106e:	93 ff       	sbrs	r25, 3
    1070:	81 91       	ld	r24, Z+
    1072:	7f 01       	movw	r14, r30
    1074:	88 23       	and	r24, r24
    1076:	09 f4       	brne	.+2      	; 0x107a <vfprintf+0x3a>
    1078:	ba c1       	rjmp	.+884    	; 0x13ee <vfprintf+0x3ae>
    107a:	85 32       	cpi	r24, 0x25	; 37
    107c:	39 f4       	brne	.+14     	; 0x108c <vfprintf+0x4c>
    107e:	93 fd       	sbrc	r25, 3
    1080:	85 91       	lpm	r24, Z+
    1082:	93 ff       	sbrs	r25, 3
    1084:	81 91       	ld	r24, Z+
    1086:	7f 01       	movw	r14, r30
    1088:	85 32       	cpi	r24, 0x25	; 37
    108a:	29 f4       	brne	.+10     	; 0x1096 <vfprintf+0x56>
    108c:	b6 01       	movw	r22, r12
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 17 0a 	call	0x142e	; 0x142e <fputc>
    1094:	e7 cf       	rjmp	.-50     	; 0x1064 <vfprintf+0x24>
    1096:	91 2c       	mov	r9, r1
    1098:	21 2c       	mov	r2, r1
    109a:	31 2c       	mov	r3, r1
    109c:	ff e1       	ldi	r31, 0x1F	; 31
    109e:	f3 15       	cp	r31, r3
    10a0:	d8 f0       	brcs	.+54     	; 0x10d8 <vfprintf+0x98>
    10a2:	8b 32       	cpi	r24, 0x2B	; 43
    10a4:	79 f0       	breq	.+30     	; 0x10c4 <vfprintf+0x84>
    10a6:	38 f4       	brcc	.+14     	; 0x10b6 <vfprintf+0x76>
    10a8:	80 32       	cpi	r24, 0x20	; 32
    10aa:	79 f0       	breq	.+30     	; 0x10ca <vfprintf+0x8a>
    10ac:	83 32       	cpi	r24, 0x23	; 35
    10ae:	a1 f4       	brne	.+40     	; 0x10d8 <vfprintf+0x98>
    10b0:	23 2d       	mov	r18, r3
    10b2:	20 61       	ori	r18, 0x10	; 16
    10b4:	1d c0       	rjmp	.+58     	; 0x10f0 <vfprintf+0xb0>
    10b6:	8d 32       	cpi	r24, 0x2D	; 45
    10b8:	61 f0       	breq	.+24     	; 0x10d2 <vfprintf+0x92>
    10ba:	80 33       	cpi	r24, 0x30	; 48
    10bc:	69 f4       	brne	.+26     	; 0x10d8 <vfprintf+0x98>
    10be:	23 2d       	mov	r18, r3
    10c0:	21 60       	ori	r18, 0x01	; 1
    10c2:	16 c0       	rjmp	.+44     	; 0x10f0 <vfprintf+0xb0>
    10c4:	83 2d       	mov	r24, r3
    10c6:	82 60       	ori	r24, 0x02	; 2
    10c8:	38 2e       	mov	r3, r24
    10ca:	e3 2d       	mov	r30, r3
    10cc:	e4 60       	ori	r30, 0x04	; 4
    10ce:	3e 2e       	mov	r3, r30
    10d0:	2a c0       	rjmp	.+84     	; 0x1126 <vfprintf+0xe6>
    10d2:	f3 2d       	mov	r31, r3
    10d4:	f8 60       	ori	r31, 0x08	; 8
    10d6:	1d c0       	rjmp	.+58     	; 0x1112 <vfprintf+0xd2>
    10d8:	37 fc       	sbrc	r3, 7
    10da:	2d c0       	rjmp	.+90     	; 0x1136 <vfprintf+0xf6>
    10dc:	20 ed       	ldi	r18, 0xD0	; 208
    10de:	28 0f       	add	r18, r24
    10e0:	2a 30       	cpi	r18, 0x0A	; 10
    10e2:	40 f0       	brcs	.+16     	; 0x10f4 <vfprintf+0xb4>
    10e4:	8e 32       	cpi	r24, 0x2E	; 46
    10e6:	b9 f4       	brne	.+46     	; 0x1116 <vfprintf+0xd6>
    10e8:	36 fc       	sbrc	r3, 6
    10ea:	81 c1       	rjmp	.+770    	; 0x13ee <vfprintf+0x3ae>
    10ec:	23 2d       	mov	r18, r3
    10ee:	20 64       	ori	r18, 0x40	; 64
    10f0:	32 2e       	mov	r3, r18
    10f2:	19 c0       	rjmp	.+50     	; 0x1126 <vfprintf+0xe6>
    10f4:	36 fe       	sbrs	r3, 6
    10f6:	06 c0       	rjmp	.+12     	; 0x1104 <vfprintf+0xc4>
    10f8:	8a e0       	ldi	r24, 0x0A	; 10
    10fa:	98 9e       	mul	r9, r24
    10fc:	20 0d       	add	r18, r0
    10fe:	11 24       	eor	r1, r1
    1100:	92 2e       	mov	r9, r18
    1102:	11 c0       	rjmp	.+34     	; 0x1126 <vfprintf+0xe6>
    1104:	ea e0       	ldi	r30, 0x0A	; 10
    1106:	2e 9e       	mul	r2, r30
    1108:	20 0d       	add	r18, r0
    110a:	11 24       	eor	r1, r1
    110c:	22 2e       	mov	r2, r18
    110e:	f3 2d       	mov	r31, r3
    1110:	f0 62       	ori	r31, 0x20	; 32
    1112:	3f 2e       	mov	r3, r31
    1114:	08 c0       	rjmp	.+16     	; 0x1126 <vfprintf+0xe6>
    1116:	8c 36       	cpi	r24, 0x6C	; 108
    1118:	21 f4       	brne	.+8      	; 0x1122 <vfprintf+0xe2>
    111a:	83 2d       	mov	r24, r3
    111c:	80 68       	ori	r24, 0x80	; 128
    111e:	38 2e       	mov	r3, r24
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <vfprintf+0xe6>
    1122:	88 36       	cpi	r24, 0x68	; 104
    1124:	41 f4       	brne	.+16     	; 0x1136 <vfprintf+0xf6>
    1126:	f7 01       	movw	r30, r14
    1128:	93 fd       	sbrc	r25, 3
    112a:	85 91       	lpm	r24, Z+
    112c:	93 ff       	sbrs	r25, 3
    112e:	81 91       	ld	r24, Z+
    1130:	7f 01       	movw	r14, r30
    1132:	81 11       	cpse	r24, r1
    1134:	b3 cf       	rjmp	.-154    	; 0x109c <vfprintf+0x5c>
    1136:	98 2f       	mov	r25, r24
    1138:	9f 7d       	andi	r25, 0xDF	; 223
    113a:	95 54       	subi	r25, 0x45	; 69
    113c:	93 30       	cpi	r25, 0x03	; 3
    113e:	28 f4       	brcc	.+10     	; 0x114a <vfprintf+0x10a>
    1140:	0c 5f       	subi	r16, 0xFC	; 252
    1142:	1f 4f       	sbci	r17, 0xFF	; 255
    1144:	9f e3       	ldi	r25, 0x3F	; 63
    1146:	99 83       	std	Y+1, r25	; 0x01
    1148:	0d c0       	rjmp	.+26     	; 0x1164 <vfprintf+0x124>
    114a:	83 36       	cpi	r24, 0x63	; 99
    114c:	31 f0       	breq	.+12     	; 0x115a <vfprintf+0x11a>
    114e:	83 37       	cpi	r24, 0x73	; 115
    1150:	71 f0       	breq	.+28     	; 0x116e <vfprintf+0x12e>
    1152:	83 35       	cpi	r24, 0x53	; 83
    1154:	09 f0       	breq	.+2      	; 0x1158 <vfprintf+0x118>
    1156:	59 c0       	rjmp	.+178    	; 0x120a <vfprintf+0x1ca>
    1158:	21 c0       	rjmp	.+66     	; 0x119c <vfprintf+0x15c>
    115a:	f8 01       	movw	r30, r16
    115c:	80 81       	ld	r24, Z
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	0e 5f       	subi	r16, 0xFE	; 254
    1162:	1f 4f       	sbci	r17, 0xFF	; 255
    1164:	88 24       	eor	r8, r8
    1166:	83 94       	inc	r8
    1168:	91 2c       	mov	r9, r1
    116a:	53 01       	movw	r10, r6
    116c:	13 c0       	rjmp	.+38     	; 0x1194 <vfprintf+0x154>
    116e:	28 01       	movw	r4, r16
    1170:	f2 e0       	ldi	r31, 0x02	; 2
    1172:	4f 0e       	add	r4, r31
    1174:	51 1c       	adc	r5, r1
    1176:	f8 01       	movw	r30, r16
    1178:	a0 80       	ld	r10, Z
    117a:	b1 80       	ldd	r11, Z+1	; 0x01
    117c:	36 fe       	sbrs	r3, 6
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <vfprintf+0x146>
    1180:	69 2d       	mov	r22, r9
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	02 c0       	rjmp	.+4      	; 0x118a <vfprintf+0x14a>
    1186:	6f ef       	ldi	r22, 0xFF	; 255
    1188:	7f ef       	ldi	r23, 0xFF	; 255
    118a:	c5 01       	movw	r24, r10
    118c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <strnlen>
    1190:	4c 01       	movw	r8, r24
    1192:	82 01       	movw	r16, r4
    1194:	f3 2d       	mov	r31, r3
    1196:	ff 77       	andi	r31, 0x7F	; 127
    1198:	3f 2e       	mov	r3, r31
    119a:	16 c0       	rjmp	.+44     	; 0x11c8 <vfprintf+0x188>
    119c:	28 01       	movw	r4, r16
    119e:	22 e0       	ldi	r18, 0x02	; 2
    11a0:	42 0e       	add	r4, r18
    11a2:	51 1c       	adc	r5, r1
    11a4:	f8 01       	movw	r30, r16
    11a6:	a0 80       	ld	r10, Z
    11a8:	b1 80       	ldd	r11, Z+1	; 0x01
    11aa:	36 fe       	sbrs	r3, 6
    11ac:	03 c0       	rjmp	.+6      	; 0x11b4 <vfprintf+0x174>
    11ae:	69 2d       	mov	r22, r9
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <vfprintf+0x178>
    11b4:	6f ef       	ldi	r22, 0xFF	; 255
    11b6:	7f ef       	ldi	r23, 0xFF	; 255
    11b8:	c5 01       	movw	r24, r10
    11ba:	0e 94 01 0a 	call	0x1402	; 0x1402 <strnlen_P>
    11be:	4c 01       	movw	r8, r24
    11c0:	f3 2d       	mov	r31, r3
    11c2:	f0 68       	ori	r31, 0x80	; 128
    11c4:	3f 2e       	mov	r3, r31
    11c6:	82 01       	movw	r16, r4
    11c8:	33 fc       	sbrc	r3, 3
    11ca:	1b c0       	rjmp	.+54     	; 0x1202 <vfprintf+0x1c2>
    11cc:	82 2d       	mov	r24, r2
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	88 16       	cp	r8, r24
    11d2:	99 06       	cpc	r9, r25
    11d4:	b0 f4       	brcc	.+44     	; 0x1202 <vfprintf+0x1c2>
    11d6:	b6 01       	movw	r22, r12
    11d8:	80 e2       	ldi	r24, 0x20	; 32
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	0e 94 17 0a 	call	0x142e	; 0x142e <fputc>
    11e0:	2a 94       	dec	r2
    11e2:	f4 cf       	rjmp	.-24     	; 0x11cc <vfprintf+0x18c>
    11e4:	f5 01       	movw	r30, r10
    11e6:	37 fc       	sbrc	r3, 7
    11e8:	85 91       	lpm	r24, Z+
    11ea:	37 fe       	sbrs	r3, 7
    11ec:	81 91       	ld	r24, Z+
    11ee:	5f 01       	movw	r10, r30
    11f0:	b6 01       	movw	r22, r12
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 17 0a 	call	0x142e	; 0x142e <fputc>
    11f8:	21 10       	cpse	r2, r1
    11fa:	2a 94       	dec	r2
    11fc:	21 e0       	ldi	r18, 0x01	; 1
    11fe:	82 1a       	sub	r8, r18
    1200:	91 08       	sbc	r9, r1
    1202:	81 14       	cp	r8, r1
    1204:	91 04       	cpc	r9, r1
    1206:	71 f7       	brne	.-36     	; 0x11e4 <vfprintf+0x1a4>
    1208:	e8 c0       	rjmp	.+464    	; 0x13da <vfprintf+0x39a>
    120a:	84 36       	cpi	r24, 0x64	; 100
    120c:	11 f0       	breq	.+4      	; 0x1212 <vfprintf+0x1d2>
    120e:	89 36       	cpi	r24, 0x69	; 105
    1210:	41 f5       	brne	.+80     	; 0x1262 <vfprintf+0x222>
    1212:	f8 01       	movw	r30, r16
    1214:	37 fe       	sbrs	r3, 7
    1216:	07 c0       	rjmp	.+14     	; 0x1226 <vfprintf+0x1e6>
    1218:	60 81       	ld	r22, Z
    121a:	71 81       	ldd	r23, Z+1	; 0x01
    121c:	82 81       	ldd	r24, Z+2	; 0x02
    121e:	93 81       	ldd	r25, Z+3	; 0x03
    1220:	0c 5f       	subi	r16, 0xFC	; 252
    1222:	1f 4f       	sbci	r17, 0xFF	; 255
    1224:	08 c0       	rjmp	.+16     	; 0x1236 <vfprintf+0x1f6>
    1226:	60 81       	ld	r22, Z
    1228:	71 81       	ldd	r23, Z+1	; 0x01
    122a:	07 2e       	mov	r0, r23
    122c:	00 0c       	add	r0, r0
    122e:	88 0b       	sbc	r24, r24
    1230:	99 0b       	sbc	r25, r25
    1232:	0e 5f       	subi	r16, 0xFE	; 254
    1234:	1f 4f       	sbci	r17, 0xFF	; 255
    1236:	f3 2d       	mov	r31, r3
    1238:	ff 76       	andi	r31, 0x6F	; 111
    123a:	3f 2e       	mov	r3, r31
    123c:	97 ff       	sbrs	r25, 7
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <vfprintf+0x212>
    1240:	90 95       	com	r25
    1242:	80 95       	com	r24
    1244:	70 95       	com	r23
    1246:	61 95       	neg	r22
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	8f 4f       	sbci	r24, 0xFF	; 255
    124c:	9f 4f       	sbci	r25, 0xFF	; 255
    124e:	f0 68       	ori	r31, 0x80	; 128
    1250:	3f 2e       	mov	r3, r31
    1252:	2a e0       	ldi	r18, 0x0A	; 10
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	a3 01       	movw	r20, r6
    1258:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__ultoa_invert>
    125c:	88 2e       	mov	r8, r24
    125e:	86 18       	sub	r8, r6
    1260:	45 c0       	rjmp	.+138    	; 0x12ec <vfprintf+0x2ac>
    1262:	85 37       	cpi	r24, 0x75	; 117
    1264:	31 f4       	brne	.+12     	; 0x1272 <vfprintf+0x232>
    1266:	23 2d       	mov	r18, r3
    1268:	2f 7e       	andi	r18, 0xEF	; 239
    126a:	b2 2e       	mov	r11, r18
    126c:	2a e0       	ldi	r18, 0x0A	; 10
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	25 c0       	rjmp	.+74     	; 0x12bc <vfprintf+0x27c>
    1272:	93 2d       	mov	r25, r3
    1274:	99 7f       	andi	r25, 0xF9	; 249
    1276:	b9 2e       	mov	r11, r25
    1278:	8f 36       	cpi	r24, 0x6F	; 111
    127a:	c1 f0       	breq	.+48     	; 0x12ac <vfprintf+0x26c>
    127c:	18 f4       	brcc	.+6      	; 0x1284 <vfprintf+0x244>
    127e:	88 35       	cpi	r24, 0x58	; 88
    1280:	79 f0       	breq	.+30     	; 0x12a0 <vfprintf+0x260>
    1282:	b5 c0       	rjmp	.+362    	; 0x13ee <vfprintf+0x3ae>
    1284:	80 37       	cpi	r24, 0x70	; 112
    1286:	19 f0       	breq	.+6      	; 0x128e <vfprintf+0x24e>
    1288:	88 37       	cpi	r24, 0x78	; 120
    128a:	21 f0       	breq	.+8      	; 0x1294 <vfprintf+0x254>
    128c:	b0 c0       	rjmp	.+352    	; 0x13ee <vfprintf+0x3ae>
    128e:	e9 2f       	mov	r30, r25
    1290:	e0 61       	ori	r30, 0x10	; 16
    1292:	be 2e       	mov	r11, r30
    1294:	b4 fe       	sbrs	r11, 4
    1296:	0d c0       	rjmp	.+26     	; 0x12b2 <vfprintf+0x272>
    1298:	fb 2d       	mov	r31, r11
    129a:	f4 60       	ori	r31, 0x04	; 4
    129c:	bf 2e       	mov	r11, r31
    129e:	09 c0       	rjmp	.+18     	; 0x12b2 <vfprintf+0x272>
    12a0:	34 fe       	sbrs	r3, 4
    12a2:	0a c0       	rjmp	.+20     	; 0x12b8 <vfprintf+0x278>
    12a4:	29 2f       	mov	r18, r25
    12a6:	26 60       	ori	r18, 0x06	; 6
    12a8:	b2 2e       	mov	r11, r18
    12aa:	06 c0       	rjmp	.+12     	; 0x12b8 <vfprintf+0x278>
    12ac:	28 e0       	ldi	r18, 0x08	; 8
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	05 c0       	rjmp	.+10     	; 0x12bc <vfprintf+0x27c>
    12b2:	20 e1       	ldi	r18, 0x10	; 16
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <vfprintf+0x27c>
    12b8:	20 e1       	ldi	r18, 0x10	; 16
    12ba:	32 e0       	ldi	r19, 0x02	; 2
    12bc:	f8 01       	movw	r30, r16
    12be:	b7 fe       	sbrs	r11, 7
    12c0:	07 c0       	rjmp	.+14     	; 0x12d0 <vfprintf+0x290>
    12c2:	60 81       	ld	r22, Z
    12c4:	71 81       	ldd	r23, Z+1	; 0x01
    12c6:	82 81       	ldd	r24, Z+2	; 0x02
    12c8:	93 81       	ldd	r25, Z+3	; 0x03
    12ca:	0c 5f       	subi	r16, 0xFC	; 252
    12cc:	1f 4f       	sbci	r17, 0xFF	; 255
    12ce:	06 c0       	rjmp	.+12     	; 0x12dc <vfprintf+0x29c>
    12d0:	60 81       	ld	r22, Z
    12d2:	71 81       	ldd	r23, Z+1	; 0x01
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 5f       	subi	r16, 0xFE	; 254
    12da:	1f 4f       	sbci	r17, 0xFF	; 255
    12dc:	a3 01       	movw	r20, r6
    12de:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__ultoa_invert>
    12e2:	88 2e       	mov	r8, r24
    12e4:	86 18       	sub	r8, r6
    12e6:	fb 2d       	mov	r31, r11
    12e8:	ff 77       	andi	r31, 0x7F	; 127
    12ea:	3f 2e       	mov	r3, r31
    12ec:	36 fe       	sbrs	r3, 6
    12ee:	0d c0       	rjmp	.+26     	; 0x130a <vfprintf+0x2ca>
    12f0:	23 2d       	mov	r18, r3
    12f2:	2e 7f       	andi	r18, 0xFE	; 254
    12f4:	a2 2e       	mov	r10, r18
    12f6:	89 14       	cp	r8, r9
    12f8:	58 f4       	brcc	.+22     	; 0x1310 <vfprintf+0x2d0>
    12fa:	34 fe       	sbrs	r3, 4
    12fc:	0b c0       	rjmp	.+22     	; 0x1314 <vfprintf+0x2d4>
    12fe:	32 fc       	sbrc	r3, 2
    1300:	09 c0       	rjmp	.+18     	; 0x1314 <vfprintf+0x2d4>
    1302:	83 2d       	mov	r24, r3
    1304:	8e 7e       	andi	r24, 0xEE	; 238
    1306:	a8 2e       	mov	r10, r24
    1308:	05 c0       	rjmp	.+10     	; 0x1314 <vfprintf+0x2d4>
    130a:	b8 2c       	mov	r11, r8
    130c:	a3 2c       	mov	r10, r3
    130e:	03 c0       	rjmp	.+6      	; 0x1316 <vfprintf+0x2d6>
    1310:	b8 2c       	mov	r11, r8
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <vfprintf+0x2d6>
    1314:	b9 2c       	mov	r11, r9
    1316:	a4 fe       	sbrs	r10, 4
    1318:	0f c0       	rjmp	.+30     	; 0x1338 <vfprintf+0x2f8>
    131a:	fe 01       	movw	r30, r28
    131c:	e8 0d       	add	r30, r8
    131e:	f1 1d       	adc	r31, r1
    1320:	80 81       	ld	r24, Z
    1322:	80 33       	cpi	r24, 0x30	; 48
    1324:	21 f4       	brne	.+8      	; 0x132e <vfprintf+0x2ee>
    1326:	9a 2d       	mov	r25, r10
    1328:	99 7e       	andi	r25, 0xE9	; 233
    132a:	a9 2e       	mov	r10, r25
    132c:	09 c0       	rjmp	.+18     	; 0x1340 <vfprintf+0x300>
    132e:	a2 fe       	sbrs	r10, 2
    1330:	06 c0       	rjmp	.+12     	; 0x133e <vfprintf+0x2fe>
    1332:	b3 94       	inc	r11
    1334:	b3 94       	inc	r11
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <vfprintf+0x300>
    1338:	8a 2d       	mov	r24, r10
    133a:	86 78       	andi	r24, 0x86	; 134
    133c:	09 f0       	breq	.+2      	; 0x1340 <vfprintf+0x300>
    133e:	b3 94       	inc	r11
    1340:	a3 fc       	sbrc	r10, 3
    1342:	11 c0       	rjmp	.+34     	; 0x1366 <vfprintf+0x326>
    1344:	a0 fe       	sbrs	r10, 0
    1346:	06 c0       	rjmp	.+12     	; 0x1354 <vfprintf+0x314>
    1348:	b2 14       	cp	r11, r2
    134a:	88 f4       	brcc	.+34     	; 0x136e <vfprintf+0x32e>
    134c:	28 0c       	add	r2, r8
    134e:	92 2c       	mov	r9, r2
    1350:	9b 18       	sub	r9, r11
    1352:	0e c0       	rjmp	.+28     	; 0x1370 <vfprintf+0x330>
    1354:	b2 14       	cp	r11, r2
    1356:	60 f4       	brcc	.+24     	; 0x1370 <vfprintf+0x330>
    1358:	b6 01       	movw	r22, r12
    135a:	80 e2       	ldi	r24, 0x20	; 32
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 17 0a 	call	0x142e	; 0x142e <fputc>
    1362:	b3 94       	inc	r11
    1364:	f7 cf       	rjmp	.-18     	; 0x1354 <vfprintf+0x314>
    1366:	b2 14       	cp	r11, r2
    1368:	18 f4       	brcc	.+6      	; 0x1370 <vfprintf+0x330>
    136a:	2b 18       	sub	r2, r11
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <vfprintf+0x332>
    136e:	98 2c       	mov	r9, r8
    1370:	21 2c       	mov	r2, r1
    1372:	a4 fe       	sbrs	r10, 4
    1374:	10 c0       	rjmp	.+32     	; 0x1396 <vfprintf+0x356>
    1376:	b6 01       	movw	r22, r12
    1378:	80 e3       	ldi	r24, 0x30	; 48
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 17 0a 	call	0x142e	; 0x142e <fputc>
    1380:	a2 fe       	sbrs	r10, 2
    1382:	17 c0       	rjmp	.+46     	; 0x13b2 <vfprintf+0x372>
    1384:	a1 fc       	sbrc	r10, 1
    1386:	03 c0       	rjmp	.+6      	; 0x138e <vfprintf+0x34e>
    1388:	88 e7       	ldi	r24, 0x78	; 120
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <vfprintf+0x352>
    138e:	88 e5       	ldi	r24, 0x58	; 88
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	b6 01       	movw	r22, r12
    1394:	0c c0       	rjmp	.+24     	; 0x13ae <vfprintf+0x36e>
    1396:	8a 2d       	mov	r24, r10
    1398:	86 78       	andi	r24, 0x86	; 134
    139a:	59 f0       	breq	.+22     	; 0x13b2 <vfprintf+0x372>
    139c:	a1 fe       	sbrs	r10, 1
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <vfprintf+0x364>
    13a0:	8b e2       	ldi	r24, 0x2B	; 43
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <vfprintf+0x366>
    13a4:	80 e2       	ldi	r24, 0x20	; 32
    13a6:	a7 fc       	sbrc	r10, 7
    13a8:	8d e2       	ldi	r24, 0x2D	; 45
    13aa:	b6 01       	movw	r22, r12
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 17 0a 	call	0x142e	; 0x142e <fputc>
    13b2:	89 14       	cp	r8, r9
    13b4:	38 f4       	brcc	.+14     	; 0x13c4 <vfprintf+0x384>
    13b6:	b6 01       	movw	r22, r12
    13b8:	80 e3       	ldi	r24, 0x30	; 48
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 17 0a 	call	0x142e	; 0x142e <fputc>
    13c0:	9a 94       	dec	r9
    13c2:	f7 cf       	rjmp	.-18     	; 0x13b2 <vfprintf+0x372>
    13c4:	8a 94       	dec	r8
    13c6:	f3 01       	movw	r30, r6
    13c8:	e8 0d       	add	r30, r8
    13ca:	f1 1d       	adc	r31, r1
    13cc:	80 81       	ld	r24, Z
    13ce:	b6 01       	movw	r22, r12
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 17 0a 	call	0x142e	; 0x142e <fputc>
    13d6:	81 10       	cpse	r8, r1
    13d8:	f5 cf       	rjmp	.-22     	; 0x13c4 <vfprintf+0x384>
    13da:	22 20       	and	r2, r2
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <vfprintf+0x3a0>
    13de:	42 ce       	rjmp	.-892    	; 0x1064 <vfprintf+0x24>
    13e0:	b6 01       	movw	r22, r12
    13e2:	80 e2       	ldi	r24, 0x20	; 32
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	0e 94 17 0a 	call	0x142e	; 0x142e <fputc>
    13ea:	2a 94       	dec	r2
    13ec:	f6 cf       	rjmp	.-20     	; 0x13da <vfprintf+0x39a>
    13ee:	f6 01       	movw	r30, r12
    13f0:	86 81       	ldd	r24, Z+6	; 0x06
    13f2:	97 81       	ldd	r25, Z+7	; 0x07
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <vfprintf+0x3ba>
    13f6:	8f ef       	ldi	r24, 0xFF	; 255
    13f8:	9f ef       	ldi	r25, 0xFF	; 255
    13fa:	2b 96       	adiw	r28, 0x0b	; 11
    13fc:	e2 e1       	ldi	r30, 0x12	; 18
    13fe:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__epilogue_restores__>

00001402 <strnlen_P>:
    1402:	fc 01       	movw	r30, r24
    1404:	05 90       	lpm	r0, Z+
    1406:	61 50       	subi	r22, 0x01	; 1
    1408:	70 40       	sbci	r23, 0x00	; 0
    140a:	01 10       	cpse	r0, r1
    140c:	d8 f7       	brcc	.-10     	; 0x1404 <strnlen_P+0x2>
    140e:	80 95       	com	r24
    1410:	90 95       	com	r25
    1412:	8e 0f       	add	r24, r30
    1414:	9f 1f       	adc	r25, r31
    1416:	08 95       	ret

00001418 <strnlen>:
    1418:	fc 01       	movw	r30, r24
    141a:	61 50       	subi	r22, 0x01	; 1
    141c:	70 40       	sbci	r23, 0x00	; 0
    141e:	01 90       	ld	r0, Z+
    1420:	01 10       	cpse	r0, r1
    1422:	d8 f7       	brcc	.-10     	; 0x141a <strnlen+0x2>
    1424:	80 95       	com	r24
    1426:	90 95       	com	r25
    1428:	8e 0f       	add	r24, r30
    142a:	9f 1f       	adc	r25, r31
    142c:	08 95       	ret

0000142e <fputc>:
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	fb 01       	movw	r30, r22
    1438:	23 81       	ldd	r18, Z+3	; 0x03
    143a:	21 fd       	sbrc	r18, 1
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <fputc+0x16>
    143e:	8f ef       	ldi	r24, 0xFF	; 255
    1440:	9f ef       	ldi	r25, 0xFF	; 255
    1442:	2c c0       	rjmp	.+88     	; 0x149c <fputc+0x6e>
    1444:	22 ff       	sbrs	r18, 2
    1446:	16 c0       	rjmp	.+44     	; 0x1474 <fputc+0x46>
    1448:	46 81       	ldd	r20, Z+6	; 0x06
    144a:	57 81       	ldd	r21, Z+7	; 0x07
    144c:	24 81       	ldd	r18, Z+4	; 0x04
    144e:	35 81       	ldd	r19, Z+5	; 0x05
    1450:	42 17       	cp	r20, r18
    1452:	53 07       	cpc	r21, r19
    1454:	44 f4       	brge	.+16     	; 0x1466 <fputc+0x38>
    1456:	a0 81       	ld	r26, Z
    1458:	b1 81       	ldd	r27, Z+1	; 0x01
    145a:	9d 01       	movw	r18, r26
    145c:	2f 5f       	subi	r18, 0xFF	; 255
    145e:	3f 4f       	sbci	r19, 0xFF	; 255
    1460:	31 83       	std	Z+1, r19	; 0x01
    1462:	20 83       	st	Z, r18
    1464:	8c 93       	st	X, r24
    1466:	26 81       	ldd	r18, Z+6	; 0x06
    1468:	37 81       	ldd	r19, Z+7	; 0x07
    146a:	2f 5f       	subi	r18, 0xFF	; 255
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	37 83       	std	Z+7, r19	; 0x07
    1470:	26 83       	std	Z+6, r18	; 0x06
    1472:	14 c0       	rjmp	.+40     	; 0x149c <fputc+0x6e>
    1474:	8b 01       	movw	r16, r22
    1476:	ec 01       	movw	r28, r24
    1478:	fb 01       	movw	r30, r22
    147a:	00 84       	ldd	r0, Z+8	; 0x08
    147c:	f1 85       	ldd	r31, Z+9	; 0x09
    147e:	e0 2d       	mov	r30, r0
    1480:	09 95       	icall
    1482:	89 2b       	or	r24, r25
    1484:	e1 f6       	brne	.-72     	; 0x143e <fputc+0x10>
    1486:	d8 01       	movw	r26, r16
    1488:	16 96       	adiw	r26, 0x06	; 6
    148a:	8d 91       	ld	r24, X+
    148c:	9c 91       	ld	r25, X
    148e:	17 97       	sbiw	r26, 0x07	; 7
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	17 96       	adiw	r26, 0x07	; 7
    1494:	9c 93       	st	X, r25
    1496:	8e 93       	st	-X, r24
    1498:	16 97       	sbiw	r26, 0x06	; 6
    149a:	ce 01       	movw	r24, r28
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	1f 91       	pop	r17
    14a2:	0f 91       	pop	r16
    14a4:	08 95       	ret

000014a6 <__ultoa_invert>:
    14a6:	fa 01       	movw	r30, r20
    14a8:	aa 27       	eor	r26, r26
    14aa:	28 30       	cpi	r18, 0x08	; 8
    14ac:	51 f1       	breq	.+84     	; 0x1502 <__ultoa_invert+0x5c>
    14ae:	20 31       	cpi	r18, 0x10	; 16
    14b0:	81 f1       	breq	.+96     	; 0x1512 <__ultoa_invert+0x6c>
    14b2:	e8 94       	clt
    14b4:	6f 93       	push	r22
    14b6:	6e 7f       	andi	r22, 0xFE	; 254
    14b8:	6e 5f       	subi	r22, 0xFE	; 254
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
    14bc:	8f 4f       	sbci	r24, 0xFF	; 255
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	af 4f       	sbci	r26, 0xFF	; 255
    14c2:	b1 e0       	ldi	r27, 0x01	; 1
    14c4:	3e d0       	rcall	.+124    	; 0x1542 <__ultoa_invert+0x9c>
    14c6:	b4 e0       	ldi	r27, 0x04	; 4
    14c8:	3c d0       	rcall	.+120    	; 0x1542 <__ultoa_invert+0x9c>
    14ca:	67 0f       	add	r22, r23
    14cc:	78 1f       	adc	r23, r24
    14ce:	89 1f       	adc	r24, r25
    14d0:	9a 1f       	adc	r25, r26
    14d2:	a1 1d       	adc	r26, r1
    14d4:	68 0f       	add	r22, r24
    14d6:	79 1f       	adc	r23, r25
    14d8:	8a 1f       	adc	r24, r26
    14da:	91 1d       	adc	r25, r1
    14dc:	a1 1d       	adc	r26, r1
    14de:	6a 0f       	add	r22, r26
    14e0:	71 1d       	adc	r23, r1
    14e2:	81 1d       	adc	r24, r1
    14e4:	91 1d       	adc	r25, r1
    14e6:	a1 1d       	adc	r26, r1
    14e8:	20 d0       	rcall	.+64     	; 0x152a <__ultoa_invert+0x84>
    14ea:	09 f4       	brne	.+2      	; 0x14ee <__ultoa_invert+0x48>
    14ec:	68 94       	set
    14ee:	3f 91       	pop	r19
    14f0:	2a e0       	ldi	r18, 0x0A	; 10
    14f2:	26 9f       	mul	r18, r22
    14f4:	11 24       	eor	r1, r1
    14f6:	30 19       	sub	r19, r0
    14f8:	30 5d       	subi	r19, 0xD0	; 208
    14fa:	31 93       	st	Z+, r19
    14fc:	de f6       	brtc	.-74     	; 0x14b4 <__ultoa_invert+0xe>
    14fe:	cf 01       	movw	r24, r30
    1500:	08 95       	ret
    1502:	46 2f       	mov	r20, r22
    1504:	47 70       	andi	r20, 0x07	; 7
    1506:	40 5d       	subi	r20, 0xD0	; 208
    1508:	41 93       	st	Z+, r20
    150a:	b3 e0       	ldi	r27, 0x03	; 3
    150c:	0f d0       	rcall	.+30     	; 0x152c <__ultoa_invert+0x86>
    150e:	c9 f7       	brne	.-14     	; 0x1502 <__ultoa_invert+0x5c>
    1510:	f6 cf       	rjmp	.-20     	; 0x14fe <__ultoa_invert+0x58>
    1512:	46 2f       	mov	r20, r22
    1514:	4f 70       	andi	r20, 0x0F	; 15
    1516:	40 5d       	subi	r20, 0xD0	; 208
    1518:	4a 33       	cpi	r20, 0x3A	; 58
    151a:	18 f0       	brcs	.+6      	; 0x1522 <__ultoa_invert+0x7c>
    151c:	49 5d       	subi	r20, 0xD9	; 217
    151e:	31 fd       	sbrc	r19, 1
    1520:	40 52       	subi	r20, 0x20	; 32
    1522:	41 93       	st	Z+, r20
    1524:	02 d0       	rcall	.+4      	; 0x152a <__ultoa_invert+0x84>
    1526:	a9 f7       	brne	.-22     	; 0x1512 <__ultoa_invert+0x6c>
    1528:	ea cf       	rjmp	.-44     	; 0x14fe <__ultoa_invert+0x58>
    152a:	b4 e0       	ldi	r27, 0x04	; 4
    152c:	a6 95       	lsr	r26
    152e:	97 95       	ror	r25
    1530:	87 95       	ror	r24
    1532:	77 95       	ror	r23
    1534:	67 95       	ror	r22
    1536:	ba 95       	dec	r27
    1538:	c9 f7       	brne	.-14     	; 0x152c <__ultoa_invert+0x86>
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	61 05       	cpc	r22, r1
    153e:	71 05       	cpc	r23, r1
    1540:	08 95       	ret
    1542:	9b 01       	movw	r18, r22
    1544:	ac 01       	movw	r20, r24
    1546:	0a 2e       	mov	r0, r26
    1548:	06 94       	lsr	r0
    154a:	57 95       	ror	r21
    154c:	47 95       	ror	r20
    154e:	37 95       	ror	r19
    1550:	27 95       	ror	r18
    1552:	ba 95       	dec	r27
    1554:	c9 f7       	brne	.-14     	; 0x1548 <__ultoa_invert+0xa2>
    1556:	62 0f       	add	r22, r18
    1558:	73 1f       	adc	r23, r19
    155a:	84 1f       	adc	r24, r20
    155c:	95 1f       	adc	r25, r21
    155e:	a0 1d       	adc	r26, r0
    1560:	08 95       	ret

00001562 <__prologue_saves__>:
    1562:	2f 92       	push	r2
    1564:	3f 92       	push	r3
    1566:	4f 92       	push	r4
    1568:	5f 92       	push	r5
    156a:	6f 92       	push	r6
    156c:	7f 92       	push	r7
    156e:	8f 92       	push	r8
    1570:	9f 92       	push	r9
    1572:	af 92       	push	r10
    1574:	bf 92       	push	r11
    1576:	cf 92       	push	r12
    1578:	df 92       	push	r13
    157a:	ef 92       	push	r14
    157c:	ff 92       	push	r15
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	ca 1b       	sub	r28, r26
    158c:	db 0b       	sbc	r29, r27
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	09 94       	ijmp

0000159a <__epilogue_restores__>:
    159a:	2a 88       	ldd	r2, Y+18	; 0x12
    159c:	39 88       	ldd	r3, Y+17	; 0x11
    159e:	48 88       	ldd	r4, Y+16	; 0x10
    15a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    15a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    15a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    15a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    15a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    15aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    15ac:	b9 84       	ldd	r11, Y+9	; 0x09
    15ae:	c8 84       	ldd	r12, Y+8	; 0x08
    15b0:	df 80       	ldd	r13, Y+7	; 0x07
    15b2:	ee 80       	ldd	r14, Y+6	; 0x06
    15b4:	fd 80       	ldd	r15, Y+5	; 0x05
    15b6:	0c 81       	ldd	r16, Y+4	; 0x04
    15b8:	1b 81       	ldd	r17, Y+3	; 0x03
    15ba:	aa 81       	ldd	r26, Y+2	; 0x02
    15bc:	b9 81       	ldd	r27, Y+1	; 0x01
    15be:	ce 0f       	add	r28, r30
    15c0:	d1 1d       	adc	r29, r1
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	ed 01       	movw	r28, r26
    15ce:	08 95       	ret

000015d0 <_exit>:
    15d0:	f8 94       	cli

000015d2 <__stop_program>:
    15d2:	ff cf       	rjmp	.-2      	; 0x15d2 <__stop_program>
